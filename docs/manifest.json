{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.9", "generated_at": "2023-11-26T18:26:30.231858Z", "invocation_id": "8f39a39a-42bb-471d-88f6-453fe1423892", "env": {}, "project_name": "ae_project", "project_id": "8d4eb577a5fe028866cea98ff9f22244", "user_id": "63f30e1f-96d2-4291-b3f3-7914ca89d1ee", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.ae_project.fact_end_of_day_balance": {"database": "key-hope-406212", "schema": "ae_dim_dwh", "name": "fact_end_of_day_balance", "resource_type": "model", "package_name": "ae_project", "path": "dim_dwh/fact_end_of_day_balance.sql", "original_file_path": "models/dim_dwh/fact_end_of_day_balance.sql", "unique_id": "model.ae_project.fact_end_of_day_balance", "fqn": ["ae_project", "dim_dwh", "fact_end_of_day_balance"], "alias": "fact_end_of_day_balance", "checksum": {"name": "sha256", "checksum": "1deb86f68b6a6d2aa5f137a44f0251e1a01b8caa1e96f144254da8452e5d4703"}, "config": {"enabled": true, "alias": "fact_end_of_day_balance", "schema": "dim_dwh", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Fact End Of Day Balance is the fact table of the dimensional model, which is containing the end of day balance amounts of contact accounts.", "columns": {"dim_contact_id": {"name": "dim_contact_id", "description": "A Dim Contact Id Hsh is the generated surrogate (hashed) key for a contact.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "dim_account_id": {"name": "dim_account_id", "description": "A Dim Account Id Hsh is the generated surrogate (hashed) key for a account.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "dim_product_id": {"name": "dim_product_id", "description": "A Dim Product Id Hsh is the generated surrogate (hashed) key for a product.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "dim_eod_valid_from_date_id": {"name": "dim_eod_valid_from_date_id", "description": "A Dim Eod Valid From Date Id Hsh is the generated surrogate (hashed) key for a date (which the eod balance is valid from).", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "dim_eod_valid_to_date_id": {"name": "dim_eod_valid_to_date_id", "description": "A Dim Eod Valid To Date Id Hsh is the generated surrogate (hashed) key for a date (which the eod balance is valid until).", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "latest_eod_balance_indicator": {"name": "latest_eod_balance_indicator", "description": "A Latest EOD Balance Indicator indicates if the EOD Balance is still the most up to date amount.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "eod_balance_amount": {"name": "eod_balance_amount", "description": "An EOD Balance Amount is the end of day balance of an account in Euros.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/dim_dwh/dim_dwh.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dim_dwh", "alias": "fact_end_of_day_balance"}, "created_at": 1701023112.6015415, "relation_name": "`key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`", "raw_code": "{{ config(\r\n    schema='dim_dwh', \r\n    alias='fact_end_of_day_balance',\r\n    materialized='table') }}\r\n\r\nWITH source AS (\r\n    select distinct\r\n    CASE WHEN cls.contact_id is null then ch.contact_id\r\n    when cls.contact_id is not null then cls.contact_id end as contact_id,\r\n    CASE WHEN cls.contact_id is null then ch.contact_id\r\n    when cls.contact_id is not null then cls.rel_contact_id end as alternative_contact_id,\r\n    ah.account_id, ph.product_id,\r\n    ebs.valid_from_date, ebs.valid_to_date, \r\n    current_indicator as latest_eod_balance_indicator,\r\n    eod_balance_amount\r\n\r\n    from {{ ref('account_contact_link') }} acl\r\n    inner join {{ ref('account_hub') }} ah on ah.account_hsh=acl.account_hsh\r\n    inner join {{ ref('contact_hub') }} ch on ch.contact_hsh=acl.contact_hsh\r\n    left join {{ ref('contact_link_sa') }} cls on (ch.contact_hsh = cls.contact_hsh or ch.contact_hsh = cls.rel_contact_hsh)\r\n    inner join {{ ref('account_product_link') }} apl on ah.account_hsh=apl.account_hsh\r\n    inner join {{ ref('product_hub') }} ph on apl.product_hsh=ph.product_hsh\r\n    inner join {{ ref('eod_balance_account_link') }} ebal on ah.account_hsh=ebal.account_hsh\r\n    inner join {{ ref('end_of_day_balance_hub') }} ebh on ebal.eod_balance_hsh=ebh.eod_balance_hsh\r\n    inner join {{ ref('end_of_day_balance_sat') }} ebs on ebh.eod_balance_hsh=ebs.eod_balance_hsh\r\n\r\norder by contact_id, account_id, valid_from_date desc),\r\n\r\ndim_contact AS (\r\n    select distinct dim_contact_id, s.* \r\n    from {{ ref('dim_contact') }} dc\r\n    left join source s on dc.contact_id=s.contact_id and dc.alternative_contact_id=s.alternative_contact_id\r\n),\r\n\r\ndim_account AS (\r\n    select distinct dim_account_id, s.* \r\n    from {{ ref('dim_account') }} da\r\n    inner join dim_contact s on da.account_id=s.account_id\r\n),\r\n\r\ndim_product AS (\r\n    select distinct dim_product_id, s.* \r\n    from {{ ref('dim_product') }} dp\r\n    inner join dim_account s on dp.product_id=s.product_id\r\n),\r\n\r\ndim_valid_from_date AS (\r\n    select dim_date_id as dim_eod_valid_from_date_id, s.* \r\n    from {{ ref('dim_date') }} dd\r\n    inner join dim_product s on dd.date=s.valid_from_date\r\n),\r\n\r\ndim_valid_to_date AS (\r\n    select dim_date_id as dim_eod_valid_to_date_id, s.* \r\n    from {{ ref('dim_date') }} dd\r\n    inner join dim_valid_from_date s on dd.date=s.valid_to_date),\r\n\r\nfinal AS (\r\nselect \r\n    dim_contact_id,\r\n    dim_account_id,\r\n    dim_product_id,\r\n    dim_eod_valid_from_date_id,\r\n    dim_eod_valid_to_date_id,\r\n    latest_eod_balance_indicator,\r\n    eod_balance_amount\r\n\r\nfrom dim_valid_to_date\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "account_contact_link", "package": null, "version": null}, {"name": "account_hub", "package": null, "version": null}, {"name": "contact_hub", "package": null, "version": null}, {"name": "contact_link_sa", "package": null, "version": null}, {"name": "account_product_link", "package": null, "version": null}, {"name": "product_hub", "package": null, "version": null}, {"name": "eod_balance_account_link", "package": null, "version": null}, {"name": "end_of_day_balance_hub", "package": null, "version": null}, {"name": "end_of_day_balance_sat", "package": null, "version": null}, {"name": "dim_contact", "package": null, "version": null}, {"name": "dim_account", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.account_contact_link", "model.ae_project.account_hub", "model.ae_project.contact_hub", "model.ae_project.contact_link_sa", "model.ae_project.account_product_link", "model.ae_project.product_hub", "model.ae_project.eod_balance_account_link", "model.ae_project.end_of_day_balance_hub", "model.ae_project.end_of_day_balance_sat", "model.ae_project.dim_contact", "model.ae_project.dim_account", "model.ae_project.dim_product", "model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/fact_end_of_day_balance.sql", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    select distinct\n    CASE WHEN cls.contact_id is null then ch.contact_id\n    when cls.contact_id is not null then cls.contact_id end as contact_id,\n    CASE WHEN cls.contact_id is null then ch.contact_id\n    when cls.contact_id is not null then cls.rel_contact_id end as alternative_contact_id,\n    ah.account_id, ph.product_id,\n    ebs.valid_from_date, ebs.valid_to_date, \n    current_indicator as latest_eod_balance_indicator,\n    eod_balance_amount\n\n    from `key-hope-406212`.`ae_data_vault`.`account_contact_link` acl\n    inner join `key-hope-406212`.`ae_data_vault`.`account_hub` ah on ah.account_hsh=acl.account_hsh\n    inner join `key-hope-406212`.`ae_data_vault`.`contact_hub` ch on ch.contact_hsh=acl.contact_hsh\n    left join `key-hope-406212`.`ae_data_vault`.`contact_link_sa` cls on (ch.contact_hsh = cls.contact_hsh or ch.contact_hsh = cls.rel_contact_hsh)\n    inner join `key-hope-406212`.`ae_data_vault`.`account_product_link` apl on ah.account_hsh=apl.account_hsh\n    inner join `key-hope-406212`.`ae_data_vault`.`product_hub` ph on apl.product_hsh=ph.product_hsh\n    inner join `key-hope-406212`.`ae_data_vault`.`eod_balance_account_link` ebal on ah.account_hsh=ebal.account_hsh\n    inner join `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub` ebh on ebal.eod_balance_hsh=ebh.eod_balance_hsh\n    inner join `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_sat` ebs on ebh.eod_balance_hsh=ebs.eod_balance_hsh\n\norder by contact_id, account_id, valid_from_date desc),\n\ndim_contact AS (\n    select distinct dim_contact_id, s.* \n    from `key-hope-406212`.`ae_dim_dwh`.`dim_contact` dc\n    left join source s on dc.contact_id=s.contact_id and dc.alternative_contact_id=s.alternative_contact_id\n),\n\ndim_account AS (\n    select distinct dim_account_id, s.* \n    from `key-hope-406212`.`ae_dim_dwh`.`dim_account` da\n    inner join dim_contact s on da.account_id=s.account_id\n),\n\ndim_product AS (\n    select distinct dim_product_id, s.* \n    from `key-hope-406212`.`ae_dim_dwh`.`dim_product` dp\n    inner join dim_account s on dp.product_id=s.product_id\n),\n\ndim_valid_from_date AS (\n    select dim_date_id as dim_eod_valid_from_date_id, s.* \n    from `key-hope-406212`.`ae_dim_dwh`.`dim_date` dd\n    inner join dim_product s on dd.date=s.valid_from_date\n),\n\ndim_valid_to_date AS (\n    select dim_date_id as dim_eod_valid_to_date_id, s.* \n    from `key-hope-406212`.`ae_dim_dwh`.`dim_date` dd\n    inner join dim_valid_from_date s on dd.date=s.valid_to_date),\n\nfinal AS (\nselect \n    dim_contact_id,\n    dim_account_id,\n    dim_product_id,\n    dim_eod_valid_from_date_id,\n    dim_eod_valid_to_date_id,\n    latest_eod_balance_indicator,\n    eod_balance_amount\n\nfrom dim_valid_to_date\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.dim_product": {"database": "key-hope-406212", "schema": "ae_dim_dwh", "name": "dim_product", "resource_type": "model", "package_name": "ae_project", "path": "dim_dwh/dim_product.sql", "original_file_path": "models/dim_dwh/dim_product.sql", "unique_id": "model.ae_project.dim_product", "fqn": ["ae_project", "dim_dwh", "dim_product"], "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "1623dde65225b32839044e85748888d15c90035271ae0fbbb2fd69bf8a0e721d"}, "config": {"enabled": true, "alias": "dim_product", "schema": "dim_dwh", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Dim Product contains the product details of the customer accounts..", "columns": {"dim_product_id": {"name": "dim_product_id", "description": "Dim_product_id Hsh is the generated surrogate (hashed) key for a product.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_from_date": {"name": "valid_from_date", "description": "A Valid From Date is the date which the data is valid from (SCD2 column).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_to_date": {"name": "valid_to_date", "description": "A Valid To Date is the date which the data is valid until (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_indicator": {"name": "current_indicator", "description": "A Current Indicator indicates if the data is still the up to date (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_indicator": {"name": "deleted_indicator", "description": "A Deleted Indicator indicates if the data is not up to date anymore (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "Product Id is the unique identifier of a product.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "A Product Name is the name of a product.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/dim_dwh/dim_dwh.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dim_dwh", "alias": "dim_product"}, "created_at": 1701023112.5959122, "relation_name": "`key-hope-406212`.`ae_dim_dwh`.`dim_product`", "raw_code": "{{ config(\r\n    schema='dim_dwh', \r\n    alias='dim_product',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('product_sat') }}\r\n)\r\n\r\nselect \r\n    md5(p_product_id) as dim_product_id,\r\n    p_product_id as product_id,\r\n    p_product_name as product_name,\r\n    valid_from_date,\r\n    valid_to_date,\r\n    current_indicator,\r\n    deleted_indicator\r\nfrom source", "language": "sql", "refs": [{"name": "product_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.product_sat"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_product.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_data_vault`.`product_sat`\n)\n\nselect \n    md5(p_product_id) as dim_product_id,\n    p_product_id as product_id,\n    p_product_name as product_name,\n    valid_from_date,\n    valid_to_date,\n    current_indicator,\n    deleted_indicator\nfrom source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.dim_account": {"database": "key-hope-406212", "schema": "ae_dim_dwh", "name": "dim_account", "resource_type": "model", "package_name": "ae_project", "path": "dim_dwh/dim_account.sql", "original_file_path": "models/dim_dwh/dim_account.sql", "unique_id": "model.ae_project.dim_account", "fqn": ["ae_project", "dim_dwh", "dim_account"], "alias": "dim_account", "checksum": {"name": "sha256", "checksum": "02bf75bb2c66669fcc43b81fdc82833ee8a33c2f5520de7c8486ae2273f82494"}, "config": {"enabled": true, "alias": "dim_account", "schema": "dim_dwh", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Dim Account contains the account(contract) details of the customers..", "columns": {"dim_account_id": {"name": "dim_account_id", "description": "A Dim Account Id Hsh is the generated surrogate (hashed) key for a account.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_from_date": {"name": "valid_from_date", "description": "A Valid From Date is the date which the data is valid from (SCD2 column).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_to_date": {"name": "valid_to_date", "description": "A Valid To Date is the date which the data is valid until (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_indicator": {"name": "current_indicator", "description": "A Current Indicator indicates if the data is still the up to date (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_indicator": {"name": "deleted_indicator", "description": "A Deleted Indicator indicates if the data is not up to date anymore (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "An Account Id is the unique identifier of an account.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "account_user_type": {"name": "account_user_type", "description": "An Account User Type is the type of the user (owner or user) an account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/dim_dwh/dim_dwh.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dim_dwh", "alias": "dim_account"}, "created_at": 1701023112.5897405, "relation_name": "`key-hope-406212`.`ae_dim_dwh`.`dim_account`", "raw_code": "{{ config(\r\n    schema='dim_dwh', \r\n    alias='dim_account',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('account_sat') }}\r\n)\r\n\r\nselect \r\n    md5(a_account_id) as dim_account_id,\r\n    a_account_id as account_id,\r\n    a_account_user_type as account_user_type,\r\n    valid_from_date,\r\n    valid_to_date,\r\n    current_indicator,\r\n    deleted_indicator\r\nfrom source", "language": "sql", "refs": [{"name": "account_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.account_sat"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_account.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_data_vault`.`account_sat`\n)\n\nselect \n    md5(a_account_id) as dim_account_id,\n    a_account_id as account_id,\n    a_account_user_type as account_user_type,\n    valid_from_date,\n    valid_to_date,\n    current_indicator,\n    deleted_indicator\nfrom source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.dim_date": {"database": "key-hope-406212", "schema": "ae_dim_dwh", "name": "dim_date", "resource_type": "model", "package_name": "ae_project", "path": "dim_dwh/dim_date.sql", "original_file_path": "models/dim_dwh/dim_date.sql", "unique_id": "model.ae_project.dim_date", "fqn": ["ae_project", "dim_dwh", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "eb7bf04c735813b9aae82fc57feb01c058e5dc7183c5d234a3d18e6469226067"}, "config": {"enabled": true, "alias": "dim_date", "schema": "dim_dwh", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Dim Date is the date dimensions of calendar dates.", "columns": {"dim_date_id": {"name": "dim_date_id", "description": "Dim_date_id Hsh is the generated surrogate (hashed) key for a date.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "date": {"name": "date", "description": "Date is the calendar date.", "meta": {}, "data_type": null, "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "day": {"name": "day", "description": "A Day is the number of the day of calendar date.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "month": {"name": "month", "description": "A Month is the number of the month of calendar date.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "year": {"name": "year", "description": "A Year is the number of the year of calendar date.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/dim_dwh/dim_dwh.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dim_dwh", "alias": "dim_date"}, "created_at": 1701023112.5985854, "relation_name": "`key-hope-406212`.`ae_dim_dwh`.`dim_date`", "raw_code": "{{ config(\r\n    schema='dim_dwh', \r\n    alias='dim_date',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('stg_sources__date') }}\r\n)\r\n\r\nselect \r\n    md5(cast(full_date as string)) as dim_date_id,\r\n    full_date as date,\r\n    year,\r\n    month,\r\n    year_day as day\r\nfrom source\r\norder by date", "language": "sql", "refs": [{"name": "stg_sources__date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_date.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_staging`.`stg_sources__date`\n)\n\nselect \n    md5(cast(full_date as string)) as dim_date_id,\n    full_date as date,\n    year,\n    month,\n    year_day as day\nfrom source\norder by date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.dim_contact": {"database": "key-hope-406212", "schema": "ae_dim_dwh", "name": "dim_contact", "resource_type": "model", "package_name": "ae_project", "path": "dim_dwh/dim_contact.sql", "original_file_path": "models/dim_dwh/dim_contact.sql", "unique_id": "model.ae_project.dim_contact", "fqn": ["ae_project", "dim_dwh", "dim_contact"], "alias": "dim_contact", "checksum": {"name": "sha256", "checksum": "82f5b62bee79fd0d333f5a4ed3b816a11d889cc2436c81c5450123ad6dd51207"}, "config": {"enabled": true, "alias": "dim_contact", "schema": "dim_dwh", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Dim Contact is a name given to an individual who is a customer of the bank..", "columns": {"dim_contact_id": {"name": "dim_contact_id", "description": "A Dim Contact Id Hsh is the generated surrogate (hashed) key for a contact.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_from_date": {"name": "valid_from_date", "description": "A Valid From Date is the date which the data is valid from (SCD2 column).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_to_date": {"name": "valid_to_date", "description": "A Valid To Date is the date which the data is valid until (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_indicator": {"name": "current_indicator", "description": "A Current Indicator indicates if the data is still the up to date (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_indicator": {"name": "deleted_indicator", "description": "A Deleted Indicator indicates if the data is not up to date anymore (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "Contact Id is the unique identifier of a contact.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "alternative_contact_id": {"name": "alternative_contact_id", "description": "An Alternative Contact is the contact id of the customer if the same customer is a part of different source system with a different identifier.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Gender is the gender information of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Birth Date is the birth date of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "age": {"name": "age", "description": "Age is the age of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First Name is the name of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last Name is the last name of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/dim_dwh/dim_dwh.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dim_dwh", "alias": "dim_contact"}, "created_at": 1701023112.5931308, "relation_name": "`key-hope-406212`.`ae_dim_dwh`.`dim_contact`", "raw_code": "{{ config(\r\n    schema='dim_dwh', \r\n    alias='dim_contact',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('contact_sat') }}\r\n),\r\n\r\nrelated_contact AS (\r\n    select s.*, sa.rel_contact_id as c_related_contact_id \r\n    from source s\r\n    inner join {{ ref('contact_link_sa') }} sa on s.c_contact_id = sa.contact_id\r\n),\r\n\r\nunrelated_contact AS (\r\n    select s.* from source s\r\n    left join {{ ref('contact_link_sa') }} sa on (s.c_contact_id = sa.rel_contact_id OR s.c_contact_id=sa.contact_id)\r\n    where sa.rel_contact_id is null\r\n),\r\n\r\nall_contact AS (\r\n    select c_contact_id, c_related_contact_id, c_gender, c_birth_date, c_age, c_first_name, c_last_name,\r\n    valid_from_date, valid_to_date, current_indicator, deleted_indicator\r\n    from related_contact\r\n    union all\r\n    select c_contact_id, c_contact_id as c_related_contact_id, c_gender, c_birth_date, c_age, c_first_name, c_last_name,\r\n    valid_from_date, valid_to_date, current_indicator, deleted_indicator\r\n    from unrelated_contact\r\n)\r\n\r\nselect \r\n    md5(concat(c_contact_id, c_related_contact_id)) as dim_contact_id,\r\n    c_contact_id as contact_id,\r\n    c_related_contact_id as alternative_contact_id,\r\n    c_gender as gender, \r\n    c_birth_date as birth_date, \r\n    c_age as age, \r\n    c_first_name as first_name, \r\n    c_last_name as last_name,\r\n    valid_from_date,\r\n    valid_to_date,\r\n    current_indicator,\r\n    deleted_indicator\r\nfrom all_contact\r\norder by c_contact_id", "language": "sql", "refs": [{"name": "contact_sat", "package": null, "version": null}, {"name": "contact_link_sa", "package": null, "version": null}, {"name": "contact_link_sa", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.contact_sat", "model.ae_project.contact_link_sa"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_contact.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_data_vault`.`contact_sat`\n),\n\nrelated_contact AS (\n    select s.*, sa.rel_contact_id as c_related_contact_id \n    from source s\n    inner join `key-hope-406212`.`ae_data_vault`.`contact_link_sa` sa on s.c_contact_id = sa.contact_id\n),\n\nunrelated_contact AS (\n    select s.* from source s\n    left join `key-hope-406212`.`ae_data_vault`.`contact_link_sa` sa on (s.c_contact_id = sa.rel_contact_id OR s.c_contact_id=sa.contact_id)\n    where sa.rel_contact_id is null\n),\n\nall_contact AS (\n    select c_contact_id, c_related_contact_id, c_gender, c_birth_date, c_age, c_first_name, c_last_name,\n    valid_from_date, valid_to_date, current_indicator, deleted_indicator\n    from related_contact\n    union all\n    select c_contact_id, c_contact_id as c_related_contact_id, c_gender, c_birth_date, c_age, c_first_name, c_last_name,\n    valid_from_date, valid_to_date, current_indicator, deleted_indicator\n    from unrelated_contact\n)\n\nselect \n    md5(concat(c_contact_id, c_related_contact_id)) as dim_contact_id,\n    c_contact_id as contact_id,\n    c_related_contact_id as alternative_contact_id,\n    c_gender as gender, \n    c_birth_date as birth_date, \n    c_age as age, \n    c_first_name as first_name, \n    c_last_name as last_name,\n    valid_from_date,\n    valid_to_date,\n    current_indicator,\n    deleted_indicator\nfrom all_contact\norder by c_contact_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.contact_hub": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "contact_hub", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/contact_hub.sql", "original_file_path": "models/data_vault/contact_hub.sql", "unique_id": "model.ae_project.contact_hub", "fqn": ["ae_project", "data_vault", "contact_hub"], "alias": "contact_hub", "checksum": {"name": "sha256", "checksum": "eb4c9e68722b1100a9965b6046e3e83bed3d5386cc1c033ef040ac771ada9cdb"}, "config": {"enabled": true, "alias": "contact_hub", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Contact Hub is a name given to an individual who is a customer of the bank..", "columns": {"contact_hsh": {"name": "contact_hsh", "description": "Contact Hsh is the generated surrogate (hashed) key for a contact.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "load_dt": {"name": "load_dt", "description": "A Load Dt is the date when the data is loaded into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rec_src": {"name": "rec_src", "description": "A Rec Src is the source name of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "Contact Id is the unique identifier of a contact.", "meta": {}, "data_type": null, "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "contact_hub"}, "created_at": 1701023112.747537, "relation_name": "`key-hope-406212`.`ae_data_vault`.`contact_hub`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='contact_hub',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('stg_sources__contact') }}\r\n)\r\n\r\nSELECT DISTINCT\r\nsha256(client_id) AS contact_hsh,\r\ncast('2018-12-31' as date) AS load_dt,\r\nrec_src,\r\nclient_id as contact_id\r\n\r\nFROM source", "language": "sql", "refs": [{"name": "stg_sources__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__contact"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/contact_hub.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_staging`.`stg_sources__contact`\n)\n\nSELECT DISTINCT\nsha256(client_id) AS contact_hsh,\ncast('2018-12-31' as date) AS load_dt,\nrec_src,\nclient_id as contact_id\n\nFROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.account_product_link": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "account_product_link", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/account_product_link.sql", "original_file_path": "models/data_vault/account_product_link.sql", "unique_id": "model.ae_project.account_product_link", "fqn": ["ae_project", "data_vault", "account_product_link"], "alias": "account_product_link", "checksum": {"name": "sha256", "checksum": "51bc44b946c9353f1a6f43d00c10848bc0219ad070faa797dce80f32d6d1a566"}, "config": {"enabled": true, "alias": "account_product_link", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An account_product_link is the link inbetween accounts and products.", "columns": {"link_hsh": {"name": "link_hsh", "description": "Link Hsh is the generated surrogate (hashed) key for a account and product link.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "account_hsh": {"name": "account_hsh", "description": "Account Hsh is the generated surrogate (hashed) key for a account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_hsh": {"name": "product_hsh", "description": "Product Hsh is the generated surrogate (hashed) key for a product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "account_product_link"}, "created_at": 1701023112.7425008, "relation_name": "`key-hope-406212`.`ae_data_vault`.`account_product_link`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='account_product_link',\r\n    materialized='table') }}\r\n\r\nWITH link_source as (\r\n   select product_id, account_id from {{ ref('stg_sources__account') }}\r\n),\r\n\r\nlookup_acc AS (\r\nselect account_hsh, account_id from {{ ref('account_hub') }}\r\n),\r\n\r\nlookup_pro AS (\r\nselect product_hsh, product_id from {{ ref('product_hub') }}\r\n)\r\n\r\nSELECT DISTINCT\r\nsha256(concat(ac.account_hsh, pr.product_hsh)) as link_hsh,\r\nac.account_hsh,\r\npr.product_hsh\r\nFROM link_source ls\r\nINNER JOIN lookup_acc ac ON ls.account_id = ac.account_id\r\nINNER JOIN lookup_pro pr ON cast(ls.product_id as string) = pr.product_id", "language": "sql", "refs": [{"name": "stg_sources__account", "package": null, "version": null}, {"name": "account_hub", "package": null, "version": null}, {"name": "product_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__account", "model.ae_project.account_hub", "model.ae_project.product_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/account_product_link.sql", "compiled": true, "compiled_code": "\n\nWITH link_source as (\n   select product_id, account_id from `key-hope-406212`.`ae_staging`.`stg_sources__account`\n),\n\nlookup_acc AS (\nselect account_hsh, account_id from `key-hope-406212`.`ae_data_vault`.`account_hub`\n),\n\nlookup_pro AS (\nselect product_hsh, product_id from `key-hope-406212`.`ae_data_vault`.`product_hub`\n)\n\nSELECT DISTINCT\nsha256(concat(ac.account_hsh, pr.product_hsh)) as link_hsh,\nac.account_hsh,\npr.product_hsh\nFROM link_source ls\nINNER JOIN lookup_acc ac ON ls.account_id = ac.account_id\nINNER JOIN lookup_pro pr ON cast(ls.product_id as string) = pr.product_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.eod_balance_account_link": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "eod_balance_account_link", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/eod_balance_account_link.sql", "original_file_path": "models/data_vault/eod_balance_account_link.sql", "unique_id": "model.ae_project.eod_balance_account_link", "fqn": ["ae_project", "data_vault", "eod_balance_account_link"], "alias": "eod_balance_account_link", "checksum": {"name": "sha256", "checksum": "53448365cc5003357a606139399a1a128d26d8af2fc71b46955449ecb50a1f4b"}, "config": {"enabled": true, "alias": "eod_balance_account_link", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An eod_balance_account_link is the link inbetween accounts and end of day balances.", "columns": {"link_hsh": {"name": "link_hsh", "description": "Link Hsh is the generated surrogate (hashed) key for a account and eod balance link.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "account_hsh": {"name": "account_hsh", "description": "Account Hsh is the generated surrogate (hashed) key for a account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eod_balance_hsh": {"name": "eod_balance_hsh", "description": "EOD Balance Hsh is the generated surrogate (hashed) key for a end of day balance event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "eod_balance_account_link"}, "created_at": 1701023112.760311, "relation_name": "`key-hope-406212`.`ae_data_vault`.`eod_balance_account_link`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='eod_balance_account_link',\r\n    materialized='table') }}\r\n\r\nWITH link_source as (\r\n   select trans_id, account_id from {{ ref('stg_sources__completedtrans') }}\r\n),\r\n\r\nlookup_acc AS (\r\n    select account_hsh, account_id from{{ ref('account_hub') }}\r\n),\r\n\r\nlookup_eod AS (\r\n    select eod_balance_hsh, eod_balance_event_id from {{ ref('end_of_day_balance_hub') }}\r\n)\r\n\r\nSELECT DISTINCT\r\n    sha256(concat(eod.eod_balance_hsh,ac.account_hsh)) as link_hsh,\r\n    eod.eod_balance_hsh,\r\n    ac.account_hsh\r\nFROM link_source ls\r\nINNER JOIN lookup_acc ac ON ls.account_id = ac.account_id\r\nINNER JOIN lookup_eod eod ON ls.trans_id = eod.eod_balance_event_id", "language": "sql", "refs": [{"name": "stg_sources__completedtrans", "package": null, "version": null}, {"name": "account_hub", "package": null, "version": null}, {"name": "end_of_day_balance_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__completedtrans", "model.ae_project.account_hub", "model.ae_project.end_of_day_balance_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/eod_balance_account_link.sql", "compiled": true, "compiled_code": "\n\nWITH link_source as (\n   select trans_id, account_id from `key-hope-406212`.`ae_staging`.`stg_sources__completedtrans`\n),\n\nlookup_acc AS (\n    select account_hsh, account_id from`key-hope-406212`.`ae_data_vault`.`account_hub`\n),\n\nlookup_eod AS (\n    select eod_balance_hsh, eod_balance_event_id from `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub`\n)\n\nSELECT DISTINCT\n    sha256(concat(eod.eod_balance_hsh,ac.account_hsh)) as link_hsh,\n    eod.eod_balance_hsh,\n    ac.account_hsh\nFROM link_source ls\nINNER JOIN lookup_acc ac ON ls.account_id = ac.account_id\nINNER JOIN lookup_eod eod ON ls.trans_id = eod.eod_balance_event_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.account_sat": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "account_sat", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/account_sat.sql", "original_file_path": "models/data_vault/account_sat.sql", "unique_id": "model.ae_project.account_sat", "fqn": ["ae_project", "data_vault", "account_sat"], "alias": "account_sat", "checksum": {"name": "sha256", "checksum": "b8128e4a46ea60435e30f692fa6990c8645b90b36433b171e1ade50a51c6f27d"}, "config": {"enabled": true, "alias": "account_sat", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An Account Sat contains the account(contract) details of the customers..", "columns": {"account_hsh": {"name": "account_hsh", "description": "Account Hsh is the generated surrogate (hashed) key for a account.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_from_date": {"name": "valid_from_date", "description": "A Valid From Date is the date which the data is valid from (SCD2 column).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "account_hsh_diff": {"name": "account_hsh_diff", "description": "Account Hsh Diff is a computation of the smallest difference between two hashes in different dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rec_src": {"name": "rec_src", "description": "A Rec Src is the source name of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_to_date": {"name": "valid_to_date", "description": "A Valid To Date is the date which the data is valid until (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_indicator": {"name": "current_indicator", "description": "A Current Indicator indicates if the data is still the up to date (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_indicator": {"name": "deleted_indicator", "description": "A Deleted Indicator indicates if the data is not up to date anymore (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "a_account_id": {"name": "a_account_id", "description": "A Account Id is the unique identifier of an account.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "a_account_user_type": {"name": "a_account_user_type", "description": "A Account User Type is the type of the user (owner or user) an account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "account_sat"}, "created_at": 1701023112.7451985, "relation_name": "`key-hope-406212`.`ae_data_vault`.`account_sat`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='account_sat',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select account_id, type, rec_src from {{ ref('stg_sources__account') }}\r\n),\r\n\r\nsource_join AS (\r\n    select a.account_hsh, s.* from source s\r\n    inner join {{ ref('account_hub') }} a on s.account_id=a.account_id\r\n),\r\n\r\nsource_fields AS (\r\n    SELECT DISTINCT\r\n    account_hsh,\r\n    '2018-12-31' AS valid_from_date,\r\n    rec_src,\r\n    '9999-12-31' AS valid_to_date,\r\n    True as current_indicator,\r\n    False as deleted_indicator,\r\n    account_id as a_account_id,\r\n    type as a_account_user_type\r\n\r\n    FROM source_join\r\n)\r\n\r\nSELECT\r\n    account_hsh,\r\n    valid_from_date,\r\n    sha256(concat(a_account_id,a_account_user_type)) as account_hsh_diff,\r\n    rec_src,\r\n    valid_to_date,\r\n    current_indicator,\r\n    deleted_indicator,\r\n    a_account_id,\r\n    a_account_user_type\r\nfrom source_fields", "language": "sql", "refs": [{"name": "stg_sources__account", "package": null, "version": null}, {"name": "account_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__account", "model.ae_project.account_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/account_sat.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select account_id, type, rec_src from `key-hope-406212`.`ae_staging`.`stg_sources__account`\n),\n\nsource_join AS (\n    select a.account_hsh, s.* from source s\n    inner join `key-hope-406212`.`ae_data_vault`.`account_hub` a on s.account_id=a.account_id\n),\n\nsource_fields AS (\n    SELECT DISTINCT\n    account_hsh,\n    '2018-12-31' AS valid_from_date,\n    rec_src,\n    '9999-12-31' AS valid_to_date,\n    True as current_indicator,\n    False as deleted_indicator,\n    account_id as a_account_id,\n    type as a_account_user_type\n\n    FROM source_join\n)\n\nSELECT\n    account_hsh,\n    valid_from_date,\n    sha256(concat(a_account_id,a_account_user_type)) as account_hsh_diff,\n    rec_src,\n    valid_to_date,\n    current_indicator,\n    deleted_indicator,\n    a_account_id,\n    a_account_user_type\nfrom source_fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.end_of_day_balance_sat": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "end_of_day_balance_sat", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/end_of_day_balance_sat.sql", "original_file_path": "models/data_vault/end_of_day_balance_sat.sql", "unique_id": "model.ae_project.end_of_day_balance_sat", "fqn": ["ae_project", "data_vault", "end_of_day_balance_sat"], "alias": "end_of_day_balance_sat", "checksum": {"name": "sha256", "checksum": "3048809f3e3ba1816d9c71a3d657e5a7655628cce4da5b66042aae13b56da173"}, "config": {"enabled": true, "alias": "end_of_day_balance_sat", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An End Of Day Balance Sat is the transaction events that a customer makes via the account..", "columns": {"eod_balance_hsh": {"name": "eod_balance_hsh", "description": "EOD Balance Hsh is the generated surrogate (hashed) key for a end of day balance event.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_from_date": {"name": "valid_from_date", "description": "A Valid From Date is the date which the data is valid from (SCD2 column).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "eod_balance_hsh_diff": {"name": "eod_balance_hsh_diff", "description": "Eod Balance Hsh Diff is a computation of the smallest difference between two hashes in different dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rec_src": {"name": "rec_src", "description": "A Rec Src is the source name of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_to_date": {"name": "valid_to_date", "description": "A Valid To Date is the date which the data is valid until (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_indicator": {"name": "current_indicator", "description": "A Current Indicator indicates if the data is still the up to date (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_indicator": {"name": "deleted_indicator", "description": "A Deleted Indicator indicates if the data is not up to date anymore (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "eod_balance_event_id": {"name": "eod_balance_event_id", "description": "EOD Balance Event Id is the unique identifier of an end of day balance.", "meta": {}, "data_type": null, "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "eod_balance_amount": {"name": "eod_balance_amount", "description": "An EOD Balance Amount is the end of day balance of an account in Euros.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "end_of_day_balance_sat"}, "created_at": 1701023112.7579243, "relation_name": "`key-hope-406212`.`ae_data_vault`.`end_of_day_balance_sat`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='end_of_day_balance_sat',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('stg_sources__completedtrans') }}\r\n),\r\n\r\neod_hub AS (\r\nselect * from {{ ref('end_of_day_balance_hub') }}\r\n),\r\n\r\n\r\neod_source AS (\r\n    select v.eod_balance_hsh, v.eod_balance_event_id, \r\n    s.trans_id, s.account_id, s.fulldate, s.balance, s.rec_src \r\n    from eod_hub v\r\n    inner join source s on v.eod_balance_event_id = s.trans_id\r\n),\r\n\r\neod_rows AS (\r\n    select rownr_a0+1 as rownr_a1, * from (\r\n        select\r\n        row_number() over (partition by account_id order by fulldate desc) as rownr_a0, *\r\n        from eod_source\r\n        order by 4,5 desc\r\n    )\r\n),\r\n\r\ncurrent_rows AS (\r\n    select \r\n    eod_balance_hsh,\r\n    fulldate AS valid_from_date,\r\n    cast('9999-12-31' as date) AS valid_to_date,\r\n    True as current_indicator,\r\n    False as deleted_indicator,\r\n    eod_balance_event_id,\r\n    balance as eod_balance_amount,\r\n    rec_src\r\n\r\n    from eod_rows\r\n    where rownr_a0 = 1),\r\n\r\ndeleted_valid_to AS (\r\n    select \r\n    a.eod_balance_hsh, a.rownr_a0, a.account_id, a.eod_balance_event_id,\r\n    a.balance as balance_a, a.fulldate as fulldate_a,\r\n    b.balance as balance_b, b.fulldate as fulldate_b, a.rec_src \r\n    from eod_rows a\r\n    inner join eod_rows b on a.account_id = b.account_id and a.rownr_a0 = b.rownr_a1\r\n),\r\n\r\ndeleted_rows AS (\r\n    select \r\n    eod_balance_hsh,\r\n    fulldate_a AS valid_from_date,\r\n    fulldate_b AS valid_to_date,\r\n    False as current_indicator,\r\n    True as deleted_indicator,\r\n    eod_balance_event_id,\r\n    balance_a as eod_balance_amount,\r\n    rec_src\r\n\r\n    from deleted_valid_to\r\n    where rownr_a0 <> 1\r\n),\r\n\r\nall_rows AS (\r\n    select * from current_rows\r\n    union all\r\n    select * from deleted_rows\r\n)\r\n\r\nselect \r\n    eod_balance_hsh,\r\n    valid_from_date,\r\n    sha256(concat(eod_balance_event_id, cast(eod_balance_amount as string))) as eod_balance_hsh_diff,\r\n    rec_src,\r\n    valid_to_date,\r\n    current_indicator,\r\n    deleted_indicator,\r\n    eod_balance_event_id,\r\n    round(eod_balance_amount, 2) as eod_balance_amount\r\nfrom all_rows\r\norder by valid_from_date desc", "language": "sql", "refs": [{"name": "stg_sources__completedtrans", "package": null, "version": null}, {"name": "end_of_day_balance_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__completedtrans", "model.ae_project.end_of_day_balance_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/end_of_day_balance_sat.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_staging`.`stg_sources__completedtrans`\n),\n\neod_hub AS (\nselect * from `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub`\n),\n\n\neod_source AS (\n    select v.eod_balance_hsh, v.eod_balance_event_id, \n    s.trans_id, s.account_id, s.fulldate, s.balance, s.rec_src \n    from eod_hub v\n    inner join source s on v.eod_balance_event_id = s.trans_id\n),\n\neod_rows AS (\n    select rownr_a0+1 as rownr_a1, * from (\n        select\n        row_number() over (partition by account_id order by fulldate desc) as rownr_a0, *\n        from eod_source\n        order by 4,5 desc\n    )\n),\n\ncurrent_rows AS (\n    select \n    eod_balance_hsh,\n    fulldate AS valid_from_date,\n    cast('9999-12-31' as date) AS valid_to_date,\n    True as current_indicator,\n    False as deleted_indicator,\n    eod_balance_event_id,\n    balance as eod_balance_amount,\n    rec_src\n\n    from eod_rows\n    where rownr_a0 = 1),\n\ndeleted_valid_to AS (\n    select \n    a.eod_balance_hsh, a.rownr_a0, a.account_id, a.eod_balance_event_id,\n    a.balance as balance_a, a.fulldate as fulldate_a,\n    b.balance as balance_b, b.fulldate as fulldate_b, a.rec_src \n    from eod_rows a\n    inner join eod_rows b on a.account_id = b.account_id and a.rownr_a0 = b.rownr_a1\n),\n\ndeleted_rows AS (\n    select \n    eod_balance_hsh,\n    fulldate_a AS valid_from_date,\n    fulldate_b AS valid_to_date,\n    False as current_indicator,\n    True as deleted_indicator,\n    eod_balance_event_id,\n    balance_a as eod_balance_amount,\n    rec_src\n\n    from deleted_valid_to\n    where rownr_a0 <> 1\n),\n\nall_rows AS (\n    select * from current_rows\n    union all\n    select * from deleted_rows\n)\n\nselect \n    eod_balance_hsh,\n    valid_from_date,\n    sha256(concat(eod_balance_event_id, cast(eod_balance_amount as string))) as eod_balance_hsh_diff,\n    rec_src,\n    valid_to_date,\n    current_indicator,\n    deleted_indicator,\n    eod_balance_event_id,\n    round(eod_balance_amount, 2) as eod_balance_amount\nfrom all_rows\norder by valid_from_date desc", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.contact_link_sa": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "contact_link_sa", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/contact_link_sa.sql", "original_file_path": "models/data_vault/contact_link_sa.sql", "unique_id": "model.ae_project.contact_link_sa", "fqn": ["ae_project", "data_vault", "contact_link_sa"], "alias": "contact_link_sa", "checksum": {"name": "sha256", "checksum": "b5f6076f95d1442f4decb98045718d67fc996e3a56fd26b5a266ced4f3bbcb76"}, "config": {"enabled": true, "alias": "contact_link_sa", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Contact Link Sa (Same As) is the self referencing entity of 2 equal but differently identified contact id's.", "columns": {"contact_id": {"name": "contact_id", "description": "Contact Id is the unique identifier of a contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_hsh": {"name": "contact_hsh", "description": "Contact Hsh is the generated surrogate (hashed) key for a contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rel_contact_id": {"name": "rel_contact_id", "description": "Rel Contact Id is the unique identifier of a related contact to the contact Id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rel_contact_hsh": {"name": "rel_contact_hsh", "description": "Rel Contact Hsh is the generated surrogate (hashed) key for a related contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "contact_link_sa"}, "created_at": 1701023112.7496054, "relation_name": "`key-hope-406212`.`ae_data_vault`.`contact_link_sa`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='contact_link_sa',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select contact_id, contact_hsh from {{ ref('contact_hub') }}\r\n),\r\n\r\nbusiness_logic AS (select contact_id, contact_hsh,\r\ncase when contact_id like 'X%' then substr(contact_id,3,9) else null end as conv_contact_id\r\nfrom {{ ref('contact_hub') }}\r\n),\r\n\r\nrelated_contacts AS (\r\nselect s.contact_id,\r\ns.contact_hsh, \r\nbl.contact_id as rel_contact_id,\r\nbl.contact_hsh as rel_contact_hsh\r\nfrom source s\r\ninner join business_logic bl on s.contact_id = bl.conv_contact_id\r\n)\r\n\r\nselect * from related_contacts", "language": "sql", "refs": [{"name": "contact_hub", "package": null, "version": null}, {"name": "contact_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.contact_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/contact_link_sa.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select contact_id, contact_hsh from `key-hope-406212`.`ae_data_vault`.`contact_hub`\n),\n\nbusiness_logic AS (select contact_id, contact_hsh,\ncase when contact_id like 'X%' then substr(contact_id,3,9) else null end as conv_contact_id\nfrom `key-hope-406212`.`ae_data_vault`.`contact_hub`\n),\n\nrelated_contacts AS (\nselect s.contact_id,\ns.contact_hsh, \nbl.contact_id as rel_contact_id,\nbl.contact_hsh as rel_contact_hsh\nfrom source s\ninner join business_logic bl on s.contact_id = bl.conv_contact_id\n)\n\nselect * from related_contacts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.product_sat": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "product_sat", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/product_sat.sql", "original_file_path": "models/data_vault/product_sat.sql", "unique_id": "model.ae_project.product_sat", "fqn": ["ae_project", "data_vault", "product_sat"], "alias": "product_sat", "checksum": {"name": "sha256", "checksum": "b82938711272ba9e91771ac844ad4cb80c778c109ea2514c50e6148e4fa6d9c4"}, "config": {"enabled": true, "alias": "product_sat", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Product Sat contains the product details of the customer accounts..", "columns": {"product_hsh": {"name": "product_hsh", "description": "Product Hsh is the generated surrogate (hashed) key for a product.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_from_date": {"name": "valid_from_date", "description": "A Valid From Date is the date which the data is valid from (SCD2 column).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "product_hsh_diff": {"name": "product_hsh_diff", "description": "Product Hsh Diff is a computation of the smallest difference between two hashes in different dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rec_src": {"name": "rec_src", "description": "A Rec Src is the source name of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_to_date": {"name": "valid_to_date", "description": "A Valid To Date is the date which the data is valid until (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_indicator": {"name": "current_indicator", "description": "A Current Indicator indicates if the data is still the up to date (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_indicator": {"name": "deleted_indicator", "description": "A Deleted Indicator indicates if the data is not up to date anymore (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "p_product_id": {"name": "p_product_id", "description": "P Product Id is the unique identifier of a product.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "p_product_name": {"name": "p_product_name", "description": "A Product Name is the name of a product.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "product_sat"}, "created_at": 1701023112.7654667, "relation_name": "`key-hope-406212`.`ae_data_vault`.`product_sat`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='product_sat',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select product_id, product_name, rec_src from {{ ref('stg_sources__account') }}\r\n),\r\n\r\nsource_unique AS (\r\n    select * from (\r\n    select product_id, product_name, rec_src, \r\n    row_number() over (partition by product_id order by rec_src) AS rownr\r\n    from source)\r\n    where rownr=1\r\n),\r\n\r\nsource_join AS (\r\n    select p.product_hsh, p.product_id, s.product_name, s.rec_src from source_unique s\r\n    inner join {{ ref('product_hub') }} p on cast(s.product_id as string)=p.product_id\r\n),\r\n\r\nsource_fields AS (SELECT DISTINCT\r\n    product_hsh,\r\n    '2018-12-31' AS valid_from_date,\r\n    rec_src,\r\n    '9999-12-31' AS valid_to_date,\r\n    True as current_indicator,\r\n    False as deleted_indicator,\r\n    product_id,\r\n    product_name\r\n\r\n    FROM source_join\r\n)\r\n\r\nSELECT\r\n    product_hsh,\r\n    valid_from_date,\r\n    sha256(concat(product_id, product_name)) as product_hsh_diff,\r\n    rec_src,\r\n    valid_to_date,\r\n    current_indicator,\r\n    deleted_indicator,\r\n    product_id as p_product_id,\r\n    product_name as p_product_name\r\nfrom source_fields \r\norder by product_id", "language": "sql", "refs": [{"name": "stg_sources__account", "package": null, "version": null}, {"name": "product_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__account", "model.ae_project.product_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/product_sat.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select product_id, product_name, rec_src from `key-hope-406212`.`ae_staging`.`stg_sources__account`\n),\n\nsource_unique AS (\n    select * from (\n    select product_id, product_name, rec_src, \n    row_number() over (partition by product_id order by rec_src) AS rownr\n    from source)\n    where rownr=1\n),\n\nsource_join AS (\n    select p.product_hsh, p.product_id, s.product_name, s.rec_src from source_unique s\n    inner join `key-hope-406212`.`ae_data_vault`.`product_hub` p on cast(s.product_id as string)=p.product_id\n),\n\nsource_fields AS (SELECT DISTINCT\n    product_hsh,\n    '2018-12-31' AS valid_from_date,\n    rec_src,\n    '9999-12-31' AS valid_to_date,\n    True as current_indicator,\n    False as deleted_indicator,\n    product_id,\n    product_name\n\n    FROM source_join\n)\n\nSELECT\n    product_hsh,\n    valid_from_date,\n    sha256(concat(product_id, product_name)) as product_hsh_diff,\n    rec_src,\n    valid_to_date,\n    current_indicator,\n    deleted_indicator,\n    product_id as p_product_id,\n    product_name as p_product_name\nfrom source_fields \norder by product_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.contact_sat": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "contact_sat", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/contact_sat.sql", "original_file_path": "models/data_vault/contact_sat.sql", "unique_id": "model.ae_project.contact_sat", "fqn": ["ae_project", "data_vault", "contact_sat"], "alias": "contact_sat", "checksum": {"name": "sha256", "checksum": "ba94af84657a221c4c64dceae11e9426cb1d7dae8cdb9aaa650a48cc9ed2f0f4"}, "config": {"enabled": true, "alias": "contact_sat", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Contact Sat is a name given to an individual who is a customer of the bank..", "columns": {"contact_hsh": {"name": "contact_hsh", "description": "Contact Hsh is the generated surrogate (hashed) key for a contact.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "valid_from_date": {"name": "valid_from_date", "description": "A Valid From Date is the date which the data is valid from (SCD2 column).", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "contact_hsh_diff": {"name": "contact_hsh_diff", "description": "Contact Hsh Diff is a computation of the smallest difference between two hashes in different dates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rec_src": {"name": "rec_src", "description": "A Rec Src is the source name of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "valid_to_date": {"name": "valid_to_date", "description": "A Valid To Date is the date which the data is valid until (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_indicator": {"name": "current_indicator", "description": "A Current Indicator indicates if the data is still the up to date (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_indicator": {"name": "deleted_indicator", "description": "A Deleted Indicator indicates if the data is not up to date anymore (SCD2 column).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_contact_id": {"name": "c_contact_id", "description": "C Contact Id is the unique identifier of a contact.", "meta": {}, "data_type": null, "constraints": [{"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "c_gender": {"name": "c_gender", "description": "C Gender is the gender information of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_birth_date": {"name": "c_birth_date", "description": "C Birth Date is the birth date of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_age": {"name": "c_age", "description": "C Age is the age of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_first_name": {"name": "c_first_name", "description": "C First Name is the name of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "c_last_name": {"name": "c_last_name", "description": "C Last Name is the last name of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "contact_sat"}, "created_at": 1701023112.7527654, "relation_name": "`key-hope-406212`.`ae_data_vault`.`contact_sat`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='contact_sat',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select client_id, sex, fulldate, age, first, middle, last, rec_src from {{ ref('stg_sources__contact') }}\r\n),\r\n\r\nsource_join AS (\r\n    select c.contact_hsh, s.* from source s\r\n    inner join {{ ref('contact_hub') }} c on s.client_id=c.contact_id\r\n),\r\n\r\nsource_fields AS (\r\n    SELECT DISTINCT\r\n    contact_hsh,\r\n    '2018-12-31' AS valid_from_date,\r\n    rec_src,\r\n    '9999-12-31' AS valid_to_date,\r\n    True as current_indicator,\r\n    False as deleted_indicator,\r\n    client_id as c_contact_id,\r\n    sex as c_gender,\r\n    fulldate as c_birth_date,\r\n    age as c_age,\r\n    CASE WHEN length(middle)>0 then concat(first, ' ', middle) else first end as c_first_name,\r\n    last as c_last_name\r\n    FROM source_join\r\n)\r\n\r\nSELECT\r\n    contact_hsh,\r\n    valid_from_date,\r\n    sha256(concat(c_contact_id, c_gender, c_birth_date, c_age, c_first_name, c_last_name)) as contact_hsh_diff,\r\n    rec_src,\r\n    valid_to_date,\r\n    current_indicator,\r\n    deleted_indicator,\r\n    c_contact_id,\r\n    c_gender, c_birth_date, c_age, c_first_name, c_last_name\r\nfrom source_fields", "language": "sql", "refs": [{"name": "stg_sources__contact", "package": null, "version": null}, {"name": "contact_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__contact", "model.ae_project.contact_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/contact_sat.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select client_id, sex, fulldate, age, first, middle, last, rec_src from `key-hope-406212`.`ae_staging`.`stg_sources__contact`\n),\n\nsource_join AS (\n    select c.contact_hsh, s.* from source s\n    inner join `key-hope-406212`.`ae_data_vault`.`contact_hub` c on s.client_id=c.contact_id\n),\n\nsource_fields AS (\n    SELECT DISTINCT\n    contact_hsh,\n    '2018-12-31' AS valid_from_date,\n    rec_src,\n    '9999-12-31' AS valid_to_date,\n    True as current_indicator,\n    False as deleted_indicator,\n    client_id as c_contact_id,\n    sex as c_gender,\n    fulldate as c_birth_date,\n    age as c_age,\n    CASE WHEN length(middle)>0 then concat(first, ' ', middle) else first end as c_first_name,\n    last as c_last_name\n    FROM source_join\n)\n\nSELECT\n    contact_hsh,\n    valid_from_date,\n    sha256(concat(c_contact_id, c_gender, c_birth_date, c_age, c_first_name, c_last_name)) as contact_hsh_diff,\n    rec_src,\n    valid_to_date,\n    current_indicator,\n    deleted_indicator,\n    c_contact_id,\n    c_gender, c_birth_date, c_age, c_first_name, c_last_name\nfrom source_fields", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.account_hub": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "account_hub", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/account_hub.sql", "original_file_path": "models/data_vault/account_hub.sql", "unique_id": "model.ae_project.account_hub", "fqn": ["ae_project", "data_vault", "account_hub"], "alias": "account_hub", "checksum": {"name": "sha256", "checksum": "6720e62454cc99390bba6ecf5554a0b1db3a7c818a698655ee9af14b53ef1afa"}, "config": {"enabled": true, "alias": "account_hub", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An Account Hub contains the account(contract) details of the customers..", "columns": {"account_hsh": {"name": "account_hsh", "description": "Account Hsh is the generated surrogate (hashed) key for a account.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "load_dt": {"name": "load_dt", "description": "A Load Dt is the date when the data is loaded into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rec_src": {"name": "rec_src", "description": "A Rec Src is the source name of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account Id is the unique identifier of an account.", "meta": {}, "data_type": null, "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "account_hub"}, "created_at": 1701023112.739419, "relation_name": "`key-hope-406212`.`ae_data_vault`.`account_hub`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='account_hub',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('stg_sources__account') }}\r\n)\r\n\r\nSELECT DISTINCT\r\nsha256(account_id) AS account_hsh,\r\ncast('2018-12-31' as date) AS load_dt,\r\nrec_src,\r\naccount_id\r\n\r\nFROM source", "language": "sql", "refs": [{"name": "stg_sources__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__account"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/account_hub.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_staging`.`stg_sources__account`\n)\n\nSELECT DISTINCT\nsha256(account_id) AS account_hsh,\ncast('2018-12-31' as date) AS load_dt,\nrec_src,\naccount_id\n\nFROM source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.end_of_day_balance_hub": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "end_of_day_balance_hub", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/end_of_day_balance_hub.sql", "original_file_path": "models/data_vault/end_of_day_balance_hub.sql", "unique_id": "model.ae_project.end_of_day_balance_hub", "fqn": ["ae_project", "data_vault", "end_of_day_balance_hub"], "alias": "end_of_day_balance_hub", "checksum": {"name": "sha256", "checksum": "3ddbc253d32deb207abc0f1ce991f7ff49cd36ff6345b19affd6031e2e7c97ae"}, "config": {"enabled": true, "alias": "end_of_day_balance_hub", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An End Of Day Balance Hub is the transaction events that a customer makes via the account..", "columns": {"eod_balance_hsh": {"name": "eod_balance_hsh", "description": "EOD Balance Hsh is the generated surrogate (hashed) key for a end of day balance event.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "load_dt": {"name": "load_dt", "description": "A Load Dt is the date when the data is loaded into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rec_src": {"name": "rec_src", "description": "A Rec Src is the source name of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "EOD Balance Event Id is the unique identifier of an end of day balance.", "meta": {}, "data_type": null, "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "end_of_day_balance_hub"}, "created_at": 1701023112.755122, "relation_name": "`key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='end_of_day_balance_hub',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('stg_sources__completedtrans') }}\r\n),\r\n\r\neod_source AS (\r\n    select * from (\r\n        select trans_id, rec_src,\r\n        row_number() over (partition by account_id, fulldate order by fulldatewithtime desc) as rownr\r\n        from source\r\n        where balance is not null\r\n    ) where rownr=1\r\n)\r\n\r\nSELECT DISTINCT\r\n    sha256(trans_id) AS eod_balance_hsh,\r\n    cast('2018-12-31' as date) AS load_dt,\r\n    rec_src,\r\n    trans_id AS eod_balance_event_id\r\n\r\nFROM eod_source", "language": "sql", "refs": [{"name": "stg_sources__completedtrans", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__completedtrans"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/end_of_day_balance_hub.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_staging`.`stg_sources__completedtrans`\n),\n\neod_source AS (\n    select * from (\n        select trans_id, rec_src,\n        row_number() over (partition by account_id, fulldate order by fulldatewithtime desc) as rownr\n        from source\n        where balance is not null\n    ) where rownr=1\n)\n\nSELECT DISTINCT\n    sha256(trans_id) AS eod_balance_hsh,\n    cast('2018-12-31' as date) AS load_dt,\n    rec_src,\n    trans_id AS eod_balance_event_id\n\nFROM eod_source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.product_hub": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "product_hub", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/product_hub.sql", "original_file_path": "models/data_vault/product_hub.sql", "unique_id": "model.ae_project.product_hub", "fqn": ["ae_project", "data_vault", "product_hub"], "alias": "product_hub", "checksum": {"name": "sha256", "checksum": "17b5530d6e5d09944624c64de2f44f6d4e48cdef1c09b6898b5003a6bdd13d82"}, "config": {"enabled": true, "alias": "product_hub", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Product Hub contains the product details of the customer accounts..", "columns": {"product_hsh": {"name": "product_hsh", "description": "Product Hsh is the generated surrogate (hashed) key for a product.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "load_dt": {"name": "load_dt", "description": "A Load Dt is the date when the data is loaded into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rec_src": {"name": "rec_src", "description": "A Rec Src is the source name of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "Product Id is the unique identifier of an product.", "meta": {}, "data_type": null, "constraints": [{"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "product_hub"}, "created_at": 1701023112.7627027, "relation_name": "`key-hope-406212`.`ae_data_vault`.`product_hub`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='product_hub',\r\n    materialized='table') }}\r\n\r\nWITH source as (\r\n   select * from {{ ref('stg_sources__account') }}\r\n),\r\n\r\nsource_unique AS (\r\nselect * from (\r\nselect product_id, rec_src, \r\nrow_number() over (partition by product_id order by rec_src) AS rownr\r\nfrom source)\r\nwhere rownr=1\r\n)\r\n\r\nSELECT DISTINCT\r\nsha256(cast(product_id as string)) AS product_hsh,\r\ncast('2018-12-31' as date) AS load_dt,\r\nrec_src,\r\ncast(product_id as string) as product_id\r\n\r\nFROM source_unique", "language": "sql", "refs": [{"name": "stg_sources__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__account"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/product_hub.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n   select * from `key-hope-406212`.`ae_staging`.`stg_sources__account`\n),\n\nsource_unique AS (\nselect * from (\nselect product_id, rec_src, \nrow_number() over (partition by product_id order by rec_src) AS rownr\nfrom source)\nwhere rownr=1\n)\n\nSELECT DISTINCT\nsha256(cast(product_id as string)) AS product_hsh,\ncast('2018-12-31' as date) AS load_dt,\nrec_src,\ncast(product_id as string) as product_id\n\nFROM source_unique", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.account_contact_link": {"database": "key-hope-406212", "schema": "ae_data_vault", "name": "account_contact_link", "resource_type": "model", "package_name": "ae_project", "path": "data_vault/account_contact_link.sql", "original_file_path": "models/data_vault/account_contact_link.sql", "unique_id": "model.ae_project.account_contact_link", "fqn": ["ae_project", "data_vault", "account_contact_link"], "alias": "account_contact_link", "checksum": {"name": "sha256", "checksum": "38daae4f5e4d3c7a061b72401a885dc09d3bc9c40d5d7b90038ced17aaeb157f"}, "config": {"enabled": true, "alias": "account_contact_link", "schema": "data_vault", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An account_contact_link is the link inbetween accounts and contacts.", "columns": {"link_hsh": {"name": "link_hsh", "description": "Link Hsh is the generated surrogate (hashed) key for a account and contact link.", "meta": {}, "data_type": null, "constraints": [{"type": "primary_key", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "unique", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}, {"type": "not_null", "name": null, "expression": null, "warn_unenforced": true, "warn_unsupported": true}], "quote": null, "tags": []}, "account_hsh": {"name": "account_hsh", "description": "Account Hsh is the generated surrogate (hashed) key for a account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contact_hsh": {"name": "contact_hsh", "description": "Contact Hsh is the generated surrogate (hashed) key for a contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/data_vault/data_vault.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "data_vault", "alias": "account_contact_link"}, "created_at": 1701023112.7369795, "relation_name": "`key-hope-406212`.`ae_data_vault`.`account_contact_link`", "raw_code": "{{ config(\r\n    schema='data_vault', \r\n    alias='account_contact_link',\r\n    materialized='table') }}\r\n\r\nWITH link_source as (\r\n   select client_id, account_id  from {{ ref('stg_sources__account') }}\r\n),\r\n\r\nlookup_acc AS (\r\nselect account_hsh, account_id from {{ ref('account_hub') }}\r\n),\r\n\r\nlookup_con AS (\r\nselect contact_hsh, contact_id from {{ ref('contact_hub') }}\r\n)\r\n\r\nSELECT DISTINCT\r\nsha256(concat(ac.account_hsh, co.contact_hsh)) as link_hsh,\r\nac.account_hsh,\r\nco.contact_hsh\r\nFROM link_source ls\r\nINNER JOIN lookup_acc ac ON ls.account_id = ac.account_id\r\nINNER JOIN lookup_con co ON ls.client_id = co.contact_id", "language": "sql", "refs": [{"name": "stg_sources__account", "package": null, "version": null}, {"name": "account_hub", "package": null, "version": null}, {"name": "contact_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ae_project.stg_sources__account", "model.ae_project.account_hub", "model.ae_project.contact_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/account_contact_link.sql", "compiled": true, "compiled_code": "\n\nWITH link_source as (\n   select client_id, account_id  from `key-hope-406212`.`ae_staging`.`stg_sources__account`\n),\n\nlookup_acc AS (\nselect account_hsh, account_id from `key-hope-406212`.`ae_data_vault`.`account_hub`\n),\n\nlookup_con AS (\nselect contact_hsh, contact_id from `key-hope-406212`.`ae_data_vault`.`contact_hub`\n)\n\nSELECT DISTINCT\nsha256(concat(ac.account_hsh, co.contact_hsh)) as link_hsh,\nac.account_hsh,\nco.contact_hsh\nFROM link_source ls\nINNER JOIN lookup_acc ac ON ls.account_id = ac.account_id\nINNER JOIN lookup_con co ON ls.client_id = co.contact_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.stg_sources__completedtrans": {"database": "key-hope-406212", "schema": "ae_staging", "name": "stg_sources__completedtrans", "resource_type": "model", "package_name": "ae_project", "path": "staging/stg_sources__completedtrans.sql", "original_file_path": "models/staging/stg_sources__completedtrans.sql", "unique_id": "model.ae_project.stg_sources__completedtrans", "fqn": ["ae_project", "staging", "stg_sources__completedtrans"], "alias": "stg_sources__completedtrans", "checksum": {"name": "sha256", "checksum": "35d1594facef91f96436713a8d56e076a6ff50a0da4ff0295e1ba13d761c2676"}, "config": {"enabled": true, "alias": "stg_sources__completedtrans", "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a staging entity for multiple use of the data source transactions.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/staging/stg_staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging", "alias": "stg_sources__completedtrans"}, "created_at": 1701023112.882179, "relation_name": "`key-hope-406212`.`ae_staging`.`stg_sources__completedtrans`", "raw_code": "{{ config(\r\n    schema='staging', \r\n    alias='stg_sources__completedtrans',\r\n    materialized='view') }}\r\n\r\nwith source as (\r\n    SELECT *, 'fin_a' as rec_src FROM {{ source('fin_a', 'completedtrans') }}\r\n    union all\r\n    SELECT *, 'fin_b' as rec_src FROM {{ source('fin_b', 'completedtrans') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT DISTINCT *\r\n   from source\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["fin_b", "completedtrans"], ["fin_a", "completedtrans"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ae_project.fin_b.completedtrans", "source.ae_project.fin_a.completedtrans"]}, "compiled_path": "docs/compiled/ae_project/models/staging/stg_sources__completedtrans.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n    SELECT *, 'fin_a' as rec_src FROM `key-hope-406212`.`fin_a`.`completedtrans`\n    union all\n    SELECT *, 'fin_b' as rec_src FROM `key-hope-406212`.`fin_b`.`completedtrans`\n),\n\nfinal AS (\n  SELECT DISTINCT *\n   from source\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.stg_sources__account": {"database": "key-hope-406212", "schema": "ae_staging", "name": "stg_sources__account", "resource_type": "model", "package_name": "ae_project", "path": "staging/stg_sources__account.sql", "original_file_path": "models/staging/stg_sources__account.sql", "unique_id": "model.ae_project.stg_sources__account", "fqn": ["ae_project", "staging", "stg_sources__account"], "alias": "stg_sources__account", "checksum": {"name": "sha256", "checksum": "307cda4ffd34e0ac00454bb90bc634b506d1245a8197022b5146b724c76ef554"}, "config": {"enabled": true, "alias": "stg_sources__account", "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a staging entity for multiple use of the data source accounts.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/staging/stg_staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging", "alias": "stg_sources__account"}, "created_at": 1701023112.8804035, "relation_name": "`key-hope-406212`.`ae_staging`.`stg_sources__account`", "raw_code": "{{ config(\r\n    schema='staging', \r\n    alias='stg_sources__account',\r\n    materialized='view') }}\r\n\r\nwith source as (\r\n    SELECT *, 'crm_a' as rec_src FROM {{ source('crm_a', 'account') }}\r\n    union all\r\n    SELECT *, 'crm_b' as rec_src FROM {{ source('crm_b', 'account') }}\r\n),\r\n\r\naccount_final AS (\r\n  SELECT DISTINCT *\r\n   from source\r\n)\r\n\r\nselect * from account_final", "language": "sql", "refs": [], "sources": [["crm_b", "account"], ["crm_a", "account"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ae_project.crm_b.account", "source.ae_project.crm_a.account"]}, "compiled_path": "docs/compiled/ae_project/models/staging/stg_sources__account.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n    SELECT *, 'crm_a' as rec_src FROM `key-hope-406212`.`crm_a`.`account`\n    union all\n    SELECT *, 'crm_b' as rec_src FROM `key-hope-406212`.`crm_b`.`account`\n),\n\naccount_final AS (\n  SELECT DISTINCT *\n   from source\n)\n\nselect * from account_final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.stg_sources__contact": {"database": "key-hope-406212", "schema": "ae_staging", "name": "stg_sources__contact", "resource_type": "model", "package_name": "ae_project", "path": "staging/stg_sources__contact.sql", "original_file_path": "models/staging/stg_sources__contact.sql", "unique_id": "model.ae_project.stg_sources__contact", "fqn": ["ae_project", "staging", "stg_sources__contact"], "alias": "stg_sources__contact", "checksum": {"name": "sha256", "checksum": "b7bf8d08a2a7d811498353882dbdeeb3de5120e442a8a3ee959851bc287c890c"}, "config": {"enabled": true, "alias": "stg_sources__contact", "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a staging entity for multiple use of the data source contacts.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/staging/stg_staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging", "alias": "stg_sources__contact"}, "created_at": 1701023112.8786292, "relation_name": "`key-hope-406212`.`ae_staging`.`stg_sources__contact`", "raw_code": "{{ config(\r\n    schema='staging', \r\n    alias='stg_sources__contact',\r\n    materialized='view') }}\r\n\r\nwith source as (\r\n    SELECT *, 'crm_a' as rec_src FROM {{ source('crm_a', 'contact') }}\r\n    union all\r\n    SELECT *, 'crm_b' as rec_src FROM {{ source('crm_b', 'contact') }}\r\n),\r\n\r\ncontact_final AS (\r\n  SELECT DISTINCT *\r\n   from source\r\n)\r\n\r\nselect * from contact_final", "language": "sql", "refs": [], "sources": [["crm_a", "contact"], ["crm_b", "contact"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ae_project.crm_a.contact", "source.ae_project.crm_b.contact"]}, "compiled_path": "docs/compiled/ae_project/models/staging/stg_sources__contact.sql", "compiled": true, "compiled_code": "\n\nwith source as (\n    SELECT *, 'crm_a' as rec_src FROM `key-hope-406212`.`crm_a`.`contact`\n    union all\n    SELECT *, 'crm_b' as rec_src FROM `key-hope-406212`.`crm_b`.`contact`\n),\n\ncontact_final AS (\n  SELECT DISTINCT *\n   from source\n)\n\nselect * from contact_final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ae_project.stg_sources__date": {"database": "key-hope-406212", "schema": "ae_staging", "name": "stg_sources__date", "resource_type": "model", "package_name": "ae_project", "path": "staging/stg_sources__date.sql", "original_file_path": "models/staging/stg_sources__date.sql", "unique_id": "model.ae_project.stg_sources__date", "fqn": ["ae_project", "staging", "stg_sources__date"], "alias": "stg_sources__date", "checksum": {"name": "sha256", "checksum": "86d240d980aae65ebb6d946d9595b5f17d179454cad5d663e6c686ae65549a4b"}, "config": {"enabled": true, "alias": "stg_sources__date", "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a staging entity for multiple use of the data source date dimensions.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ae_project://models/staging/stg_staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "staging", "alias": "stg_sources__date"}, "created_at": 1701023112.883917, "relation_name": "`key-hope-406212`.`ae_staging`.`stg_sources__date`", "raw_code": "{{ config(\r\n    schema='staging', \r\n    alias='stg_sources__date',\r\n    materialized='table') }}\r\n\r\nselect FORMAT_DATE('%F', d) as id,\r\n  d AS full_date,\r\n  EXTRACT(YEAR FROM d) AS year,\r\n  EXTRACT(WEEK FROM d) AS year_week,\r\n  EXTRACT(DAY FROM d) AS year_day,\r\n  EXTRACT(YEAR FROM d) AS fiscal_year,\r\n  FORMAT_DATE('%Q', d) as fiscal_qtr,\r\n  EXTRACT(MONTH FROM d) AS month,\r\n  FORMAT_DATE('%B', d) as month_name,\r\n  FORMAT_DATE('%w', d) AS week_day,\r\n  FORMAT_DATE('%A', d) AS day_name,\r\n  (CASE WHEN FORMAT_DATE('%A', d) IN ('Sunday', 'Saturday') THEN 0 ELSE 1 END) AS day_is_weekday\r\nFROM (\r\n    SELECT *\r\n    FROM UNNEST(GENERATE_DATE_ARRAY('2014-01-01', '3000-12-31', INTERVAL 1 DAY)) AS d \r\n)\r\nunion all\r\nselect FORMAT_DATE('%F', d) as id,\r\n  d AS full_date,\r\n  EXTRACT(YEAR FROM d) AS year,\r\n  EXTRACT(WEEK FROM d) AS year_week,\r\n  EXTRACT(DAY FROM d) AS year_day,\r\n  EXTRACT(YEAR FROM d) AS fiscal_year,\r\n  FORMAT_DATE('%Q', d) as fiscal_qtr,\r\n  EXTRACT(MONTH FROM d) AS month,\r\n  FORMAT_DATE('%B', d) as month_name,\r\n  FORMAT_DATE('%w', d) AS week_day,\r\n  FORMAT_DATE('%A', d) AS day_name,\r\n  (CASE WHEN FORMAT_DATE('%A', d) IN ('Sunday', 'Saturday') THEN 0 ELSE 1 END) AS day_is_weekday\r\nFROM (\r\n  SELECT *\r\n  FROM UNNEST(GENERATE_DATE_ARRAY('9999-01-01', '9999-12-31', INTERVAL 1 DAY)) AS d )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "docs/compiled/ae_project/models/staging/stg_sources__date.sql", "compiled": true, "compiled_code": "\n\nselect FORMAT_DATE('%F', d) as id,\n  d AS full_date,\n  EXTRACT(YEAR FROM d) AS year,\n  EXTRACT(WEEK FROM d) AS year_week,\n  EXTRACT(DAY FROM d) AS year_day,\n  EXTRACT(YEAR FROM d) AS fiscal_year,\n  FORMAT_DATE('%Q', d) as fiscal_qtr,\n  EXTRACT(MONTH FROM d) AS month,\n  FORMAT_DATE('%B', d) as month_name,\n  FORMAT_DATE('%w', d) AS week_day,\n  FORMAT_DATE('%A', d) AS day_name,\n  (CASE WHEN FORMAT_DATE('%A', d) IN ('Sunday', 'Saturday') THEN 0 ELSE 1 END) AS day_is_weekday\nFROM (\n    SELECT *\n    FROM UNNEST(GENERATE_DATE_ARRAY('2014-01-01', '3000-12-31', INTERVAL 1 DAY)) AS d \n)\nunion all\nselect FORMAT_DATE('%F', d) as id,\n  d AS full_date,\n  EXTRACT(YEAR FROM d) AS year,\n  EXTRACT(WEEK FROM d) AS year_week,\n  EXTRACT(DAY FROM d) AS year_day,\n  EXTRACT(YEAR FROM d) AS fiscal_year,\n  FORMAT_DATE('%Q', d) as fiscal_qtr,\n  EXTRACT(MONTH FROM d) AS month,\n  FORMAT_DATE('%B', d) as month_name,\n  FORMAT_DATE('%w', d) AS week_day,\n  FORMAT_DATE('%A', d) AS day_name,\n  (CASE WHEN FORMAT_DATE('%A', d) IN ('Sunday', 'Saturday') THEN 0 ELSE 1 END) AS day_is_weekday\nFROM (\n  SELECT *\n  FROM UNNEST(GENERATE_DATE_ARRAY('9999-01-01', '9999-12-31', INTERVAL 1 DAY)) AS d )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.ae_project.not_null_dim_account_dim_account_id.7f162e639c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_account_id", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_account_dim_account_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_account_dim_account_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_account_dim_account_id.7f162e639c", "fqn": ["ae_project", "dim_dwh", "not_null_dim_account_dim_account_id"], "alias": "not_null_dim_account_dim_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.602937, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_account_dim_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_account_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_account`\nwhere dim_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_account_id", "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.not_null_dim_account_valid_from_date.5b645f23b2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from_date", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_account_valid_from_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_account_valid_from_date.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_account_valid_from_date.5b645f23b2", "fqn": ["ae_project", "dim_dwh", "not_null_dim_account_valid_from_date"], "alias": "not_null_dim_account_valid_from_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6067967, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_account_valid_from_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from_date\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_account`\nwhere valid_from_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_from_date", "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.not_null_dim_account_valid_to_date.6b0d9d9773": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to_date", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_account_valid_to_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_account_valid_to_date.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_account_valid_to_date.6b0d9d9773", "fqn": ["ae_project", "dim_dwh", "not_null_dim_account_valid_to_date"], "alias": "not_null_dim_account_valid_to_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.609229, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_account_valid_to_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_to_date\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_account`\nwhere valid_to_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_to_date", "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.not_null_dim_account_current_indicator.fff68596b7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "current_indicator", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_account_current_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_account_current_indicator.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_account_current_indicator.fff68596b7", "fqn": ["ae_project", "dim_dwh", "not_null_dim_account_current_indicator"], "alias": "not_null_dim_account_current_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6115744, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_account_current_indicator.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect current_indicator\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_account`\nwhere current_indicator is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "current_indicator", "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.accepted_values_dim_account_current_indicator__False__True__False.b28468d1bd": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "current_indicator", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "accepted_values_dim_account_current_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_dim_account_0aa7db555bb228e2c3cb0950664dc0cc.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.accepted_values_dim_account_current_indicator__False__True__False.b28468d1bd", "fqn": ["ae_project", "dim_dwh", "accepted_values_dim_account_current_indicator__False__True__False"], "alias": "accepted_values_dim_account_0aa7db555bb228e2c3cb0950664dc0cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_account_0aa7db555bb228e2c3cb0950664dc0cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_account_0aa7db555bb228e2c3cb0950664dc0cc"}, "created_at": 1701023112.614026, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_account_0aa7db555bb228e2c3cb0950664dc0cc\") }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/accepted_values_dim_account_0aa7db555bb228e2c3cb0950664dc0cc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        current_indicator as value_field,\n        count(*) as n_records\n\n    from `key-hope-406212`.`ae_dim_dwh`.`dim_account`\n    group by current_indicator\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "current_indicator", "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.not_null_dim_account_deleted_indicator.8c845abb9f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deleted_indicator", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_account_deleted_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_account_deleted_indicator.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_account_deleted_indicator.8c845abb9f", "fqn": ["ae_project", "dim_dwh", "not_null_dim_account_deleted_indicator"], "alias": "not_null_dim_account_deleted_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6205926, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_account_deleted_indicator.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deleted_indicator\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_account`\nwhere deleted_indicator is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deleted_indicator", "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.accepted_values_dim_account_deleted_indicator__False__True__False.36980ff26b": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "deleted_indicator", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "accepted_values_dim_account_deleted_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_dim_account_9ab1628fdaffc24f183bd891e2fdf238.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.accepted_values_dim_account_deleted_indicator__False__True__False.36980ff26b", "fqn": ["ae_project", "dim_dwh", "accepted_values_dim_account_deleted_indicator__False__True__False"], "alias": "accepted_values_dim_account_9ab1628fdaffc24f183bd891e2fdf238", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_account_9ab1628fdaffc24f183bd891e2fdf238", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_account_9ab1628fdaffc24f183bd891e2fdf238"}, "created_at": 1701023112.6230576, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_account_9ab1628fdaffc24f183bd891e2fdf238\") }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/accepted_values_dim_account_9ab1628fdaffc24f183bd891e2fdf238.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        deleted_indicator as value_field,\n        count(*) as n_records\n\n    from `key-hope-406212`.`ae_dim_dwh`.`dim_account`\n    group by deleted_indicator\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deleted_indicator", "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.not_null_dim_account_account_id.c88a552464": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_account_account_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_account_account_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_account_account_id.c88a552464", "fqn": ["ae_project", "dim_dwh", "not_null_dim_account_account_id"], "alias": "not_null_dim_account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6289988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_account_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_account`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "account_id", "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.unique_dim_account__dim_account_id_valid_from_date_.b654e7d250": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(dim_account_id || '-' || valid_from_date)", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_dim_account__dim_account_id_valid_from_date_", "resource_type": "test", "package_name": "ae_project", "path": "unique_dim_account__dim_account_id_valid_from_date_.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.unique_dim_account__dim_account_id_valid_from_date_.b654e7d250", "fqn": ["ae_project", "dim_dwh", "unique_dim_account__dim_account_id_valid_from_date_"], "alias": "unique_dim_account__dim_account_id_valid_from_date_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.631354, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_account"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/unique_dim_account__dim_account_id_valid_from_date_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (dim_account_id || '-' || valid_from_date) as unique_field\n  from `key-hope-406212`.`ae_dim_dwh`.`dim_account`\n  where (dim_account_id || '-' || valid_from_date) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.dim_account", "attached_node": "model.ae_project.dim_account"}, "test.ae_project.not_null_dim_contact_dim_contact_id.82354013ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_contact_id", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_contact_dim_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_contact_dim_contact_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_contact_dim_contact_id.82354013ca", "fqn": ["ae_project", "dim_dwh", "not_null_dim_contact_dim_contact_id"], "alias": "not_null_dim_contact_dim_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6336222, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_contact_dim_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_contact_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\nwhere dim_contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_contact_id", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.not_null_dim_contact_valid_from_date.a8fba8467f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from_date", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_contact_valid_from_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_contact_valid_from_date.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_contact_valid_from_date.a8fba8467f", "fqn": ["ae_project", "dim_dwh", "not_null_dim_contact_valid_from_date"], "alias": "not_null_dim_contact_valid_from_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6359336, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_contact_valid_from_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from_date\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\nwhere valid_from_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_from_date", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.not_null_dim_contact_valid_to_date.35576c0870": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to_date", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_contact_valid_to_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_contact_valid_to_date.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_contact_valid_to_date.35576c0870", "fqn": ["ae_project", "dim_dwh", "not_null_dim_contact_valid_to_date"], "alias": "not_null_dim_contact_valid_to_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6387033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_contact_valid_to_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_to_date\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\nwhere valid_to_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_to_date", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.not_null_dim_contact_current_indicator.b98b4b5538": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "current_indicator", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_contact_current_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_contact_current_indicator.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_contact_current_indicator.b98b4b5538", "fqn": ["ae_project", "dim_dwh", "not_null_dim_contact_current_indicator"], "alias": "not_null_dim_contact_current_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6411588, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_contact_current_indicator.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect current_indicator\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\nwhere current_indicator is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "current_indicator", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.accepted_values_dim_contact_current_indicator__False__True__False.c565552494": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "current_indicator", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "accepted_values_dim_contact_current_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_dim_contact_11d8a2b8d9a77a1ce822e690f29c8c17.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.accepted_values_dim_contact_current_indicator__False__True__False.c565552494", "fqn": ["ae_project", "dim_dwh", "accepted_values_dim_contact_current_indicator__False__True__False"], "alias": "accepted_values_dim_contact_11d8a2b8d9a77a1ce822e690f29c8c17", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_contact_11d8a2b8d9a77a1ce822e690f29c8c17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_contact_11d8a2b8d9a77a1ce822e690f29c8c17"}, "created_at": 1701023112.6434963, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_contact_11d8a2b8d9a77a1ce822e690f29c8c17\") }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/accepted_values_dim_contact_11d8a2b8d9a77a1ce822e690f29c8c17.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        current_indicator as value_field,\n        count(*) as n_records\n\n    from `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\n    group by current_indicator\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "current_indicator", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.not_null_dim_contact_deleted_indicator.2f520670fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deleted_indicator", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_contact_deleted_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_contact_deleted_indicator.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_contact_deleted_indicator.2f520670fe", "fqn": ["ae_project", "dim_dwh", "not_null_dim_contact_deleted_indicator"], "alias": "not_null_dim_contact_deleted_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6491728, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_contact_deleted_indicator.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deleted_indicator\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\nwhere deleted_indicator is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deleted_indicator", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.accepted_values_dim_contact_deleted_indicator__False__True__False.3adf964b3c": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "deleted_indicator", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "accepted_values_dim_contact_deleted_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_dim_contact_c96f195112a3a0f6d580ce2f82bf3263.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.accepted_values_dim_contact_deleted_indicator__False__True__False.3adf964b3c", "fqn": ["ae_project", "dim_dwh", "accepted_values_dim_contact_deleted_indicator__False__True__False"], "alias": "accepted_values_dim_contact_c96f195112a3a0f6d580ce2f82bf3263", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_contact_c96f195112a3a0f6d580ce2f82bf3263", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_contact_c96f195112a3a0f6d580ce2f82bf3263"}, "created_at": 1701023112.651554, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_contact_c96f195112a3a0f6d580ce2f82bf3263\") }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/accepted_values_dim_contact_c96f195112a3a0f6d580ce2f82bf3263.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        deleted_indicator as value_field,\n        count(*) as n_records\n\n    from `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\n    group by deleted_indicator\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deleted_indicator", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.not_null_dim_contact_contact_id.912ab2ef27": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_contact_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_contact_contact_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_contact_contact_id.912ab2ef27", "fqn": ["ae_project", "dim_dwh", "not_null_dim_contact_contact_id"], "alias": "not_null_dim_contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6567402, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.not_null_dim_contact_alternative_contact_id.b25a1d401f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "alternative_contact_id", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_contact_alternative_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_contact_alternative_contact_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_contact_alternative_contact_id.b25a1d401f", "fqn": ["ae_project", "dim_dwh", "not_null_dim_contact_alternative_contact_id"], "alias": "not_null_dim_contact_alternative_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6592548, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_contact_alternative_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect alternative_contact_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\nwhere alternative_contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "alternative_contact_id", "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.unique_dim_contact__dim_contact_id_valid_from_date_.f2e8468cf7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(dim_contact_id || '-' || valid_from_date)", "model": "{{ get_where_subquery(ref('dim_contact')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_dim_contact__dim_contact_id_valid_from_date_", "resource_type": "test", "package_name": "ae_project", "path": "unique_dim_contact__dim_contact_id_valid_from_date_.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.unique_dim_contact__dim_contact_id_valid_from_date_.f2e8468cf7", "fqn": ["ae_project", "dim_dwh", "unique_dim_contact__dim_contact_id_valid_from_date_"], "alias": "unique_dim_contact__dim_contact_id_valid_from_date_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6615171, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_contact"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/unique_dim_contact__dim_contact_id_valid_from_date_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (dim_contact_id || '-' || valid_from_date) as unique_field\n  from `key-hope-406212`.`ae_dim_dwh`.`dim_contact`\n  where (dim_contact_id || '-' || valid_from_date) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.dim_contact", "attached_node": "model.ae_project.dim_contact"}, "test.ae_project.not_null_dim_product_dim_product_id.388a125fbe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_product_id", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_product_dim_product_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_product_dim_product_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_product_dim_product_id.388a125fbe", "fqn": ["ae_project", "dim_dwh", "not_null_dim_product_dim_product_id"], "alias": "not_null_dim_product_dim_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6637437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_product_dim_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_product_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_product`\nwhere dim_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_product_id", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.not_null_dim_product_valid_from_date.3864d9290a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from_date", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_product_valid_from_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_product_valid_from_date.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_product_valid_from_date.3864d9290a", "fqn": ["ae_project", "dim_dwh", "not_null_dim_product_valid_from_date"], "alias": "not_null_dim_product_valid_from_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6660256, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_product_valid_from_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from_date\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_product`\nwhere valid_from_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_from_date", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.not_null_dim_product_valid_to_date.8414f88d50": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to_date", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_product_valid_to_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_product_valid_to_date.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_product_valid_to_date.8414f88d50", "fqn": ["ae_project", "dim_dwh", "not_null_dim_product_valid_to_date"], "alias": "not_null_dim_product_valid_to_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.66824, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_product_valid_to_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_to_date\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_product`\nwhere valid_to_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_to_date", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.not_null_dim_product_current_indicator.8719a0bd04": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "current_indicator", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_product_current_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_product_current_indicator.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_product_current_indicator.8719a0bd04", "fqn": ["ae_project", "dim_dwh", "not_null_dim_product_current_indicator"], "alias": "not_null_dim_product_current_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6707835, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_product_current_indicator.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect current_indicator\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_product`\nwhere current_indicator is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "current_indicator", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.accepted_values_dim_product_current_indicator__False__True__False.9ace036b6f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "current_indicator", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "accepted_values_dim_product_current_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_dim_product_b24e35f1591be99df3894032b793daca.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.accepted_values_dim_product_current_indicator__False__True__False.9ace036b6f", "fqn": ["ae_project", "dim_dwh", "accepted_values_dim_product_current_indicator__False__True__False"], "alias": "accepted_values_dim_product_b24e35f1591be99df3894032b793daca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_product_b24e35f1591be99df3894032b793daca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_product_b24e35f1591be99df3894032b793daca"}, "created_at": 1701023112.6731484, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_product_b24e35f1591be99df3894032b793daca\") }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/accepted_values_dim_product_b24e35f1591be99df3894032b793daca.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        current_indicator as value_field,\n        count(*) as n_records\n\n    from `key-hope-406212`.`ae_dim_dwh`.`dim_product`\n    group by current_indicator\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "current_indicator", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.not_null_dim_product_deleted_indicator.8931cf529f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deleted_indicator", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_product_deleted_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_product_deleted_indicator.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_product_deleted_indicator.8931cf529f", "fqn": ["ae_project", "dim_dwh", "not_null_dim_product_deleted_indicator"], "alias": "not_null_dim_product_deleted_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6788151, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_product_deleted_indicator.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deleted_indicator\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_product`\nwhere deleted_indicator is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deleted_indicator", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.accepted_values_dim_product_deleted_indicator__False__True__False.b3979293c3": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "deleted_indicator", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "accepted_values_dim_product_deleted_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_dim_product_2ecaafe2a8d581fb8db7f27020efbe12.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.accepted_values_dim_product_deleted_indicator__False__True__False.b3979293c3", "fqn": ["ae_project", "dim_dwh", "accepted_values_dim_product_deleted_indicator__False__True__False"], "alias": "accepted_values_dim_product_2ecaafe2a8d581fb8db7f27020efbe12", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_product_2ecaafe2a8d581fb8db7f27020efbe12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_product_2ecaafe2a8d581fb8db7f27020efbe12"}, "created_at": 1701023112.6813638, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_product_2ecaafe2a8d581fb8db7f27020efbe12\") }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/accepted_values_dim_product_2ecaafe2a8d581fb8db7f27020efbe12.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        deleted_indicator as value_field,\n        count(*) as n_records\n\n    from `key-hope-406212`.`ae_dim_dwh`.`dim_product`\n    group by deleted_indicator\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "deleted_indicator", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.not_null_dim_product_product_id.02b1f06816": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_product_product_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_product_product_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_product_product_id.02b1f06816", "fqn": ["ae_project", "dim_dwh", "not_null_dim_product_product_id"], "alias": "not_null_dim_product_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6865897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_product_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_product`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.not_null_dim_product_product_name.1b672622d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_product_product_name", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_product_product_name.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_product_product_name.1b672622d5", "fqn": ["ae_project", "dim_dwh", "not_null_dim_product_product_name"], "alias": "not_null_dim_product_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6888335, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_product_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_product`\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.unique_dim_product__dim_product_id_valid_from_date_.8de04b1e50": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(dim_product_id || '-' || valid_from_date)", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_dim_product__dim_product_id_valid_from_date_", "resource_type": "test", "package_name": "ae_project", "path": "unique_dim_product__dim_product_id_valid_from_date_.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.unique_dim_product__dim_product_id_valid_from_date_.8de04b1e50", "fqn": ["ae_project", "dim_dwh", "unique_dim_product__dim_product_id_valid_from_date_"], "alias": "unique_dim_product__dim_product_id_valid_from_date_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6913705, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_product"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/unique_dim_product__dim_product_id_valid_from_date_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (dim_product_id || '-' || valid_from_date) as unique_field\n  from `key-hope-406212`.`ae_dim_dwh`.`dim_product`\n  where (dim_product_id || '-' || valid_from_date) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.dim_product", "attached_node": "model.ae_project.dim_product"}, "test.ae_project.unique_dim_date_dim_date_id.203517b970": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "dim_date_id", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_dim_date_dim_date_id", "resource_type": "test", "package_name": "ae_project", "path": "unique_dim_date_dim_date_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.unique_dim_date_dim_date_id.203517b970", "fqn": ["ae_project", "dim_dwh", "unique_dim_date_dim_date_id"], "alias": "unique_dim_date_dim_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6936476, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/unique_dim_date_dim_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select dim_date_id as unique_field\n  from `key-hope-406212`.`ae_dim_dwh`.`dim_date`\n  where dim_date_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_date_id", "file_key_name": "models.dim_date", "attached_node": "model.ae_project.dim_date"}, "test.ae_project.not_null_dim_date_dim_date_id.355483a04a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_date_id", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_date_dim_date_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_date_dim_date_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_date_dim_date_id.355483a04a", "fqn": ["ae_project", "dim_dwh", "not_null_dim_date_dim_date_id"], "alias": "not_null_dim_date_dim_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6958797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_date_dim_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_date_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_date`\nwhere dim_date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_date_id", "file_key_name": "models.dim_date", "attached_node": "model.ae_project.dim_date"}, "test.ae_project.unique_dim_date_date.dd069a8d31": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_dim_date_date", "resource_type": "test", "package_name": "ae_project", "path": "unique_dim_date_date.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.unique_dim_date_date.dd069a8d31", "fqn": ["ae_project", "dim_dwh", "unique_dim_date_date"], "alias": "unique_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.6981318, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/unique_dim_date_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select date as unique_field\n  from `key-hope-406212`.`ae_dim_dwh`.`dim_date`\n  where date is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_date", "attached_node": "model.ae_project.dim_date"}, "test.ae_project.not_null_dim_date_date.78f11e7735": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_date_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_date_date.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_date_date.78f11e7735", "fqn": ["ae_project", "dim_dwh", "not_null_dim_date_date"], "alias": "not_null_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7004695, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_date_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_date`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_date", "attached_node": "model.ae_project.dim_date"}, "test.ae_project.not_null_dim_date_day.479b160c6f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_date_day", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_date_day.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_date_day.479b160c6f", "fqn": ["ae_project", "dim_dwh", "not_null_dim_date_day"], "alias": "not_null_dim_date_day", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7031074, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_date_day.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_date`\nwhere day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "day", "file_key_name": "models.dim_date", "attached_node": "model.ae_project.dim_date"}, "test.ae_project.not_null_dim_date_month.180a460136": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_date_month", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_date_month.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_date_month.180a460136", "fqn": ["ae_project", "dim_dwh", "not_null_dim_date_month"], "alias": "not_null_dim_date_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7055566, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_date_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_date`\nwhere month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "month", "file_key_name": "models.dim_date", "attached_node": "model.ae_project.dim_date"}, "test.ae_project.not_null_dim_date_year.aac8e263ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_dim_date_year", "resource_type": "test", "package_name": "ae_project", "path": "not_null_dim_date_year.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_dim_date_year.aac8e263ab", "fqn": ["ae_project", "dim_dwh", "not_null_dim_date_year"], "alias": "not_null_dim_date_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.707969, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_dim_date_year.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect year\nfrom `key-hope-406212`.`ae_dim_dwh`.`dim_date`\nwhere year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "year", "file_key_name": "models.dim_date", "attached_node": "model.ae_project.dim_date"}, "test.ae_project.unique_dim_date__dim_date_id_.755d0c1339": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(dim_date_id)", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_dim_date__dim_date_id_", "resource_type": "test", "package_name": "ae_project", "path": "unique_dim_date__dim_date_id_.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.unique_dim_date__dim_date_id_.755d0c1339", "fqn": ["ae_project", "dim_dwh", "unique_dim_date__dim_date_id_"], "alias": "unique_dim_date__dim_date_id_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.710293, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.dim_date"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/unique_dim_date__dim_date_id_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (dim_date_id) as unique_field\n  from `key-hope-406212`.`ae_dim_dwh`.`dim_date`\n  where (dim_date_id) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.dim_date", "attached_node": "model.ae_project.dim_date"}, "test.ae_project.not_null_fact_end_of_day_balance_dim_contact_id.95b6cbad60": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_contact_id", "model": "{{ get_where_subquery(ref('fact_end_of_day_balance')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_fact_end_of_day_balance_dim_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_fact_end_of_day_balance_dim_contact_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_fact_end_of_day_balance_dim_contact_id.95b6cbad60", "fqn": ["ae_project", "dim_dwh", "not_null_fact_end_of_day_balance_dim_contact_id"], "alias": "not_null_fact_end_of_day_balance_dim_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7125916, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_end_of_day_balance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.fact_end_of_day_balance"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_fact_end_of_day_balance_dim_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_contact_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`\nwhere dim_contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_contact_id", "file_key_name": "models.fact_end_of_day_balance", "attached_node": "model.ae_project.fact_end_of_day_balance"}, "test.ae_project.not_null_fact_end_of_day_balance_dim_account_id.e4c2d7060b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_account_id", "model": "{{ get_where_subquery(ref('fact_end_of_day_balance')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_fact_end_of_day_balance_dim_account_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_fact_end_of_day_balance_dim_account_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_fact_end_of_day_balance_dim_account_id.e4c2d7060b", "fqn": ["ae_project", "dim_dwh", "not_null_fact_end_of_day_balance_dim_account_id"], "alias": "not_null_fact_end_of_day_balance_dim_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7153099, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_end_of_day_balance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.fact_end_of_day_balance"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_fact_end_of_day_balance_dim_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_account_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`\nwhere dim_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_account_id", "file_key_name": "models.fact_end_of_day_balance", "attached_node": "model.ae_project.fact_end_of_day_balance"}, "test.ae_project.not_null_fact_end_of_day_balance_dim_product_id.1d06d8ae4d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_product_id", "model": "{{ get_where_subquery(ref('fact_end_of_day_balance')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_fact_end_of_day_balance_dim_product_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_fact_end_of_day_balance_dim_product_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_fact_end_of_day_balance_dim_product_id.1d06d8ae4d", "fqn": ["ae_project", "dim_dwh", "not_null_fact_end_of_day_balance_dim_product_id"], "alias": "not_null_fact_end_of_day_balance_dim_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7177765, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_end_of_day_balance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.fact_end_of_day_balance"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_fact_end_of_day_balance_dim_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_product_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`\nwhere dim_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_product_id", "file_key_name": "models.fact_end_of_day_balance", "attached_node": "model.ae_project.fact_end_of_day_balance"}, "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id.233346040c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_eod_valid_from_date_id", "model": "{{ get_where_subquery(ref('fact_end_of_day_balance')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id.233346040c", "fqn": ["ae_project", "dim_dwh", "not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id"], "alias": "not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.720201, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_end_of_day_balance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.fact_end_of_day_balance"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_eod_valid_from_date_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`\nwhere dim_eod_valid_from_date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_eod_valid_from_date_id", "file_key_name": "models.fact_end_of_day_balance", "attached_node": "model.ae_project.fact_end_of_day_balance"}, "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id.33ccff24ac": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dim_eod_valid_to_date_id", "model": "{{ get_where_subquery(ref('fact_end_of_day_balance')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id.33ccff24ac", "fqn": ["ae_project", "dim_dwh", "not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id"], "alias": "not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7226763, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_end_of_day_balance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.fact_end_of_day_balance"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_eod_valid_to_date_id\nfrom `key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`\nwhere dim_eod_valid_to_date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "dim_eod_valid_to_date_id", "file_key_name": "models.fact_end_of_day_balance", "attached_node": "model.ae_project.fact_end_of_day_balance"}, "test.ae_project.not_null_fact_end_of_day_balance_latest_eod_balance_indicator.5526fcbdf4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "latest_eod_balance_indicator", "model": "{{ get_where_subquery(ref('fact_end_of_day_balance')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_fact_end_of_day_balance_latest_eod_balance_indicator", "resource_type": "test", "package_name": "ae_project", "path": "not_null_fact_end_of_day_balance_latest_eod_balance_indicator.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_fact_end_of_day_balance_latest_eod_balance_indicator.5526fcbdf4", "fqn": ["ae_project", "dim_dwh", "not_null_fact_end_of_day_balance_latest_eod_balance_indicator"], "alias": "not_null_fact_end_of_day_balance_latest_eod_balance_indicator", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7251215, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_end_of_day_balance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.fact_end_of_day_balance"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_fact_end_of_day_balance_latest_eod_balance_indicator.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect latest_eod_balance_indicator\nfrom `key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`\nwhere latest_eod_balance_indicator is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "latest_eod_balance_indicator", "file_key_name": "models.fact_end_of_day_balance", "attached_node": "model.ae_project.fact_end_of_day_balance"}, "test.ae_project.accepted_values_fact_end_of_day_balance_latest_eod_balance_indicator__False__True__False.75e8bbad1a": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "quote": false, "column_name": "latest_eod_balance_indicator", "model": "{{ get_where_subquery(ref('fact_end_of_day_balance')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "accepted_values_fact_end_of_day_balance_latest_eod_balance_indicator__False__True__False", "resource_type": "test", "package_name": "ae_project", "path": "accepted_values_fact_end_of_da_394633edc001698b1e47c6898851ff7d.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.accepted_values_fact_end_of_day_balance_latest_eod_balance_indicator__False__True__False.75e8bbad1a", "fqn": ["ae_project", "dim_dwh", "accepted_values_fact_end_of_day_balance_latest_eod_balance_indicator__False__True__False"], "alias": "accepted_values_fact_end_of_da_394633edc001698b1e47c6898851ff7d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_end_of_da_394633edc001698b1e47c6898851ff7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_end_of_da_394633edc001698b1e47c6898851ff7d"}, "created_at": 1701023112.7276886, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_end_of_da_394633edc001698b1e47c6898851ff7d\") }}", "language": "sql", "refs": [{"name": "fact_end_of_day_balance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.fact_end_of_day_balance"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/accepted_values_fact_end_of_da_394633edc001698b1e47c6898851ff7d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        latest_eod_balance_indicator as value_field,\n        count(*) as n_records\n\n    from `key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`\n    group by latest_eod_balance_indicator\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    True,False\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "latest_eod_balance_indicator", "file_key_name": "models.fact_end_of_day_balance", "attached_node": "model.ae_project.fact_end_of_day_balance"}, "test.ae_project.not_null_fact_end_of_day_balance_eod_balance_amount.4c9d9bbe87": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "eod_balance_amount", "model": "{{ get_where_subquery(ref('fact_end_of_day_balance')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_fact_end_of_day_balance_eod_balance_amount", "resource_type": "test", "package_name": "ae_project", "path": "not_null_fact_end_of_day_balance_eod_balance_amount.sql", "original_file_path": "models/dim_dwh/dim_dwh.yml", "unique_id": "test.ae_project.not_null_fact_end_of_day_balance_eod_balance_amount.4c9d9bbe87", "fqn": ["ae_project", "dim_dwh", "not_null_fact_end_of_day_balance_eod_balance_amount"], "alias": "not_null_fact_end_of_day_balance_eod_balance_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7333145, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_end_of_day_balance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.fact_end_of_day_balance"]}, "compiled_path": "docs/compiled/ae_project/models/dim_dwh/dim_dwh.yml/not_null_fact_end_of_day_balance_eod_balance_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect eod_balance_amount\nfrom `key-hope-406212`.`ae_dim_dwh`.`fact_end_of_day_balance`\nwhere eod_balance_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "eod_balance_amount", "file_key_name": "models.fact_end_of_day_balance", "attached_node": "model.ae_project.fact_end_of_day_balance"}, "test.ae_project.unique_account_contact_link_link_hsh.114c043113": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "link_hsh", "model": "{{ get_where_subquery(ref('account_contact_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_account_contact_link_link_hsh", "resource_type": "test", "package_name": "ae_project", "path": "unique_account_contact_link_link_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_account_contact_link_link_hsh.114c043113", "fqn": ["ae_project", "data_vault", "unique_account_contact_link_link_hsh"], "alias": "unique_account_contact_link_link_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.766651, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_contact_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_contact_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_account_contact_link_link_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select link_hsh as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`account_contact_link`\n  where link_hsh is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "link_hsh", "file_key_name": "models.account_contact_link", "attached_node": "model.ae_project.account_contact_link"}, "test.ae_project.not_null_account_contact_link_link_hsh.cbf246e068": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "link_hsh", "model": "{{ get_where_subquery(ref('account_contact_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_account_contact_link_link_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_account_contact_link_link_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_account_contact_link_link_hsh.cbf246e068", "fqn": ["ae_project", "data_vault", "not_null_account_contact_link_link_hsh"], "alias": "not_null_account_contact_link_link_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7689383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_contact_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_contact_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_account_contact_link_link_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect link_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`account_contact_link`\nwhere link_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "link_hsh", "file_key_name": "models.account_contact_link", "attached_node": "model.ae_project.account_contact_link"}, "test.ae_project.unique_account_contact_link__account_hsh_contact_hsh_.cc50f71c28": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(account_hsh || '-' || contact_hsh)", "model": "{{ get_where_subquery(ref('account_contact_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_account_contact_link__account_hsh_contact_hsh_", "resource_type": "test", "package_name": "ae_project", "path": "unique_account_contact_link__account_hsh_contact_hsh_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_account_contact_link__account_hsh_contact_hsh_.cc50f71c28", "fqn": ["ae_project", "data_vault", "unique_account_contact_link__account_hsh_contact_hsh_"], "alias": "unique_account_contact_link__account_hsh_contact_hsh_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7714424, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_contact_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_contact_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_account_contact_link__account_hsh_contact_hsh_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (account_hsh || '-' || contact_hsh) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`account_contact_link`\n  where (account_hsh || '-' || contact_hsh) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.account_contact_link", "attached_node": "model.ae_project.account_contact_link"}, "test.ae_project.unique_account_hub_account_hsh.76c85d1f37": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_hsh", "model": "{{ get_where_subquery(ref('account_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_account_hub_account_hsh", "resource_type": "test", "package_name": "ae_project", "path": "unique_account_hub_account_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_account_hub_account_hsh.76c85d1f37", "fqn": ["ae_project", "data_vault", "unique_account_hub_account_hsh"], "alias": "unique_account_hub_account_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7736983, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_account_hub_account_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_hsh as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`account_hub`\n  where account_hsh is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "account_hsh", "file_key_name": "models.account_hub", "attached_node": "model.ae_project.account_hub"}, "test.ae_project.not_null_account_hub_account_hsh.d3a4b6fc38": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_hsh", "model": "{{ get_where_subquery(ref('account_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_account_hub_account_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_account_hub_account_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_account_hub_account_hsh.d3a4b6fc38", "fqn": ["ae_project", "data_vault", "not_null_account_hub_account_hsh"], "alias": "not_null_account_hub_account_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.775921, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_account_hub_account_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`account_hub`\nwhere account_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "account_hsh", "file_key_name": "models.account_hub", "attached_node": "model.ae_project.account_hub"}, "test.ae_project.unique_account_hub_account_id.efa0d6259a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('account_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_account_hub_account_id", "resource_type": "test", "package_name": "ae_project", "path": "unique_account_hub_account_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_account_hub_account_id.efa0d6259a", "fqn": ["ae_project", "data_vault", "unique_account_hub_account_id"], "alias": "unique_account_hub_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7781763, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_account_hub_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_id as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`account_hub`\n  where account_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "account_id", "file_key_name": "models.account_hub", "attached_node": "model.ae_project.account_hub"}, "test.ae_project.not_null_account_hub_account_id.e113dad695": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('account_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_account_hub_account_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_account_hub_account_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_account_hub_account_id.e113dad695", "fqn": ["ae_project", "data_vault", "not_null_account_hub_account_id"], "alias": "not_null_account_hub_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7804089, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_account_hub_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `key-hope-406212`.`ae_data_vault`.`account_hub`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "account_id", "file_key_name": "models.account_hub", "attached_node": "model.ae_project.account_hub"}, "test.ae_project.unique_account_hub__account_hsh_.06268c5694": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(account_hsh)", "model": "{{ get_where_subquery(ref('account_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_account_hub__account_hsh_", "resource_type": "test", "package_name": "ae_project", "path": "unique_account_hub__account_hsh_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_account_hub__account_hsh_.06268c5694", "fqn": ["ae_project", "data_vault", "unique_account_hub__account_hsh_"], "alias": "unique_account_hub__account_hsh_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7829523, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_account_hub__account_hsh_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (account_hsh) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`account_hub`\n  where (account_hsh) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.account_hub", "attached_node": "model.ae_project.account_hub"}, "test.ae_project.unique_account_product_link_link_hsh.0aabbb25f1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "link_hsh", "model": "{{ get_where_subquery(ref('account_product_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_account_product_link_link_hsh", "resource_type": "test", "package_name": "ae_project", "path": "unique_account_product_link_link_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_account_product_link_link_hsh.0aabbb25f1", "fqn": ["ae_project", "data_vault", "unique_account_product_link_link_hsh"], "alias": "unique_account_product_link_link_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7852142, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_product_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_product_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_account_product_link_link_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select link_hsh as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`account_product_link`\n  where link_hsh is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "link_hsh", "file_key_name": "models.account_product_link", "attached_node": "model.ae_project.account_product_link"}, "test.ae_project.not_null_account_product_link_link_hsh.3de6c21670": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "link_hsh", "model": "{{ get_where_subquery(ref('account_product_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_account_product_link_link_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_account_product_link_link_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_account_product_link_link_hsh.3de6c21670", "fqn": ["ae_project", "data_vault", "not_null_account_product_link_link_hsh"], "alias": "not_null_account_product_link_link_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7874615, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_product_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_product_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_account_product_link_link_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect link_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`account_product_link`\nwhere link_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "link_hsh", "file_key_name": "models.account_product_link", "attached_node": "model.ae_project.account_product_link"}, "test.ae_project.unique_account_product_link__account_hsh_product_hsh_.d0941e9942": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(account_hsh || '-' || product_hsh)", "model": "{{ get_where_subquery(ref('account_product_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_account_product_link__account_hsh_product_hsh_", "resource_type": "test", "package_name": "ae_project", "path": "unique_account_product_link__account_hsh_product_hsh_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_account_product_link__account_hsh_product_hsh_.d0941e9942", "fqn": ["ae_project", "data_vault", "unique_account_product_link__account_hsh_product_hsh_"], "alias": "unique_account_product_link__account_hsh_product_hsh_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7897341, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_product_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_product_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_account_product_link__account_hsh_product_hsh_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (account_hsh || '-' || product_hsh) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`account_product_link`\n  where (account_hsh || '-' || product_hsh) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.account_product_link", "attached_node": "model.ae_project.account_product_link"}, "test.ae_project.not_null_account_sat_account_hsh.afb00de2d4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_hsh", "model": "{{ get_where_subquery(ref('account_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_account_sat_account_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_account_sat_account_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_account_sat_account_hsh.afb00de2d4", "fqn": ["ae_project", "data_vault", "not_null_account_sat_account_hsh"], "alias": "not_null_account_sat_account_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7920194, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_account_sat_account_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`account_sat`\nwhere account_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "account_hsh", "file_key_name": "models.account_sat", "attached_node": "model.ae_project.account_sat"}, "test.ae_project.not_null_account_sat_valid_from_date.99e6d72751": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from_date", "model": "{{ get_where_subquery(ref('account_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_account_sat_valid_from_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_account_sat_valid_from_date.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_account_sat_valid_from_date.99e6d72751", "fqn": ["ae_project", "data_vault", "not_null_account_sat_valid_from_date"], "alias": "not_null_account_sat_valid_from_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.794561, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_account_sat_valid_from_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from_date\nfrom `key-hope-406212`.`ae_data_vault`.`account_sat`\nwhere valid_from_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_from_date", "file_key_name": "models.account_sat", "attached_node": "model.ae_project.account_sat"}, "test.ae_project.not_null_account_sat_a_account_id.4397270bba": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "a_account_id", "model": "{{ get_where_subquery(ref('account_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_account_sat_a_account_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_account_sat_a_account_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_account_sat_a_account_id.4397270bba", "fqn": ["ae_project", "data_vault", "not_null_account_sat_a_account_id"], "alias": "not_null_account_sat_a_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.7968636, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_account_sat_a_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect a_account_id\nfrom `key-hope-406212`.`ae_data_vault`.`account_sat`\nwhere a_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "a_account_id", "file_key_name": "models.account_sat", "attached_node": "model.ae_project.account_sat"}, "test.ae_project.unique_account_sat__account_hsh_valid_from_date_.0bdc5dff8c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(account_hsh || '-' || valid_from_date)", "model": "{{ get_where_subquery(ref('account_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_account_sat__account_hsh_valid_from_date_", "resource_type": "test", "package_name": "ae_project", "path": "unique_account_sat__account_hsh_valid_from_date_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_account_sat__account_hsh_valid_from_date_.0bdc5dff8c", "fqn": ["ae_project", "data_vault", "unique_account_sat__account_hsh_valid_from_date_"], "alias": "unique_account_sat__account_hsh_valid_from_date_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.799139, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "account_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.account_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_account_sat__account_hsh_valid_from_date_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (account_hsh || '-' || valid_from_date) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`account_sat`\n  where (account_hsh || '-' || valid_from_date) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.account_sat", "attached_node": "model.ae_project.account_sat"}, "test.ae_project.unique_contact_hub_contact_hsh.6953fbb1e8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_hsh", "model": "{{ get_where_subquery(ref('contact_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_contact_hub_contact_hsh", "resource_type": "test", "package_name": "ae_project", "path": "unique_contact_hub_contact_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_contact_hub_contact_hsh.6953fbb1e8", "fqn": ["ae_project", "data_vault", "unique_contact_hub_contact_hsh"], "alias": "unique_contact_hub_contact_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8013809, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_contact_hub_contact_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select contact_hsh as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`contact_hub`\n  where contact_hsh is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_hsh", "file_key_name": "models.contact_hub", "attached_node": "model.ae_project.contact_hub"}, "test.ae_project.not_null_contact_hub_contact_hsh.2bc5f154b1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_hsh", "model": "{{ get_where_subquery(ref('contact_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_contact_hub_contact_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_contact_hub_contact_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_contact_hub_contact_hsh.2bc5f154b1", "fqn": ["ae_project", "data_vault", "not_null_contact_hub_contact_hsh"], "alias": "not_null_contact_hub_contact_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.803645, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_contact_hub_contact_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`contact_hub`\nwhere contact_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_hsh", "file_key_name": "models.contact_hub", "attached_node": "model.ae_project.contact_hub"}, "test.ae_project.unique_contact_hub_contact_id.180dc7c316": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('contact_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_contact_hub_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "unique_contact_hub_contact_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_contact_hub_contact_id.180dc7c316", "fqn": ["ae_project", "data_vault", "unique_contact_hub_contact_id"], "alias": "unique_contact_hub_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8061519, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_contact_hub_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select contact_id as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`contact_hub`\n  where contact_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.contact_hub", "attached_node": "model.ae_project.contact_hub"}, "test.ae_project.not_null_contact_hub_contact_id.dec739111e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('contact_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_contact_hub_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_contact_hub_contact_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_contact_hub_contact_id.dec739111e", "fqn": ["ae_project", "data_vault", "not_null_contact_hub_contact_id"], "alias": "not_null_contact_hub_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8083792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_contact_hub_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom `key-hope-406212`.`ae_data_vault`.`contact_hub`\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.contact_hub", "attached_node": "model.ae_project.contact_hub"}, "test.ae_project.unique_contact_hub__contact_hsh_.906b6397c7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(contact_hsh)", "model": "{{ get_where_subquery(ref('contact_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_contact_hub__contact_hsh_", "resource_type": "test", "package_name": "ae_project", "path": "unique_contact_hub__contact_hsh_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_contact_hub__contact_hsh_.906b6397c7", "fqn": ["ae_project", "data_vault", "unique_contact_hub__contact_hsh_"], "alias": "unique_contact_hub__contact_hsh_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.810649, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_contact_hub__contact_hsh_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (contact_hsh) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`contact_hub`\n  where (contact_hsh) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.contact_hub", "attached_node": "model.ae_project.contact_hub"}, "test.ae_project.not_null_contact_sat_contact_hsh.c372889af2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_hsh", "model": "{{ get_where_subquery(ref('contact_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_contact_sat_contact_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_contact_sat_contact_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_contact_sat_contact_hsh.c372889af2", "fqn": ["ae_project", "data_vault", "not_null_contact_sat_contact_hsh"], "alias": "not_null_contact_sat_contact_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8129022, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_contact_sat_contact_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`contact_sat`\nwhere contact_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_hsh", "file_key_name": "models.contact_sat", "attached_node": "model.ae_project.contact_sat"}, "test.ae_project.not_null_contact_sat_valid_from_date.23c90242e6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from_date", "model": "{{ get_where_subquery(ref('contact_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_contact_sat_valid_from_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_contact_sat_valid_from_date.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_contact_sat_valid_from_date.23c90242e6", "fqn": ["ae_project", "data_vault", "not_null_contact_sat_valid_from_date"], "alias": "not_null_contact_sat_valid_from_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8151321, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_contact_sat_valid_from_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from_date\nfrom `key-hope-406212`.`ae_data_vault`.`contact_sat`\nwhere valid_from_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_from_date", "file_key_name": "models.contact_sat", "attached_node": "model.ae_project.contact_sat"}, "test.ae_project.not_null_contact_sat_c_contact_id.4b606efd2a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "c_contact_id", "model": "{{ get_where_subquery(ref('contact_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_contact_sat_c_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_contact_sat_c_contact_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_contact_sat_c_contact_id.4b606efd2a", "fqn": ["ae_project", "data_vault", "not_null_contact_sat_c_contact_id"], "alias": "not_null_contact_sat_c_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.817688, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_contact_sat_c_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect c_contact_id\nfrom `key-hope-406212`.`ae_data_vault`.`contact_sat`\nwhere c_contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "c_contact_id", "file_key_name": "models.contact_sat", "attached_node": "model.ae_project.contact_sat"}, "test.ae_project.unique_contact_sat__contact_hsh_valid_from_date_.b460481673": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(contact_hsh || '-' || valid_from_date)", "model": "{{ get_where_subquery(ref('contact_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_contact_sat__contact_hsh_valid_from_date_", "resource_type": "test", "package_name": "ae_project", "path": "unique_contact_sat__contact_hsh_valid_from_date_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_contact_sat__contact_hsh_valid_from_date_.b460481673", "fqn": ["ae_project", "data_vault", "unique_contact_sat__contact_hsh_valid_from_date_"], "alias": "unique_contact_sat__contact_hsh_valid_from_date_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8199291, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "contact_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.contact_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_contact_sat__contact_hsh_valid_from_date_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (contact_hsh || '-' || valid_from_date) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`contact_sat`\n  where (contact_hsh || '-' || valid_from_date) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.contact_sat", "attached_node": "model.ae_project.contact_sat"}, "test.ae_project.unique_end_of_day_balance_hub_eod_balance_hsh.77dbc51a5d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "eod_balance_hsh", "model": "{{ get_where_subquery(ref('end_of_day_balance_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_end_of_day_balance_hub_eod_balance_hsh", "resource_type": "test", "package_name": "ae_project", "path": "unique_end_of_day_balance_hub_eod_balance_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_end_of_day_balance_hub_eod_balance_hsh.77dbc51a5d", "fqn": ["ae_project", "data_vault", "unique_end_of_day_balance_hub_eod_balance_hsh"], "alias": "unique_end_of_day_balance_hub_eod_balance_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.822192, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_end_of_day_balance_hub_eod_balance_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select eod_balance_hsh as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub`\n  where eod_balance_hsh is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "eod_balance_hsh", "file_key_name": "models.end_of_day_balance_hub", "attached_node": "model.ae_project.end_of_day_balance_hub"}, "test.ae_project.not_null_end_of_day_balance_hub_eod_balance_hsh.3b8f485b49": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "eod_balance_hsh", "model": "{{ get_where_subquery(ref('end_of_day_balance_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_end_of_day_balance_hub_eod_balance_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_end_of_day_balance_hub_eod_balance_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_end_of_day_balance_hub_eod_balance_hsh.3b8f485b49", "fqn": ["ae_project", "data_vault", "not_null_end_of_day_balance_hub_eod_balance_hsh"], "alias": "not_null_end_of_day_balance_hub_eod_balance_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8244033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_end_of_day_balance_hub_eod_balance_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect eod_balance_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub`\nwhere eod_balance_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "eod_balance_hsh", "file_key_name": "models.end_of_day_balance_hub", "attached_node": "model.ae_project.end_of_day_balance_hub"}, "test.ae_project.unique_end_of_day_balance_hub_contact_id.0c30ce0fb0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('end_of_day_balance_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_end_of_day_balance_hub_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "unique_end_of_day_balance_hub_contact_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_end_of_day_balance_hub_contact_id.0c30ce0fb0", "fqn": ["ae_project", "data_vault", "unique_end_of_day_balance_hub_contact_id"], "alias": "unique_end_of_day_balance_hub_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8266585, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_end_of_day_balance_hub_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select contact_id as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub`\n  where contact_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.end_of_day_balance_hub", "attached_node": "model.ae_project.end_of_day_balance_hub"}, "test.ae_project.not_null_end_of_day_balance_hub_contact_id.837487545f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('end_of_day_balance_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_end_of_day_balance_hub_contact_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_end_of_day_balance_hub_contact_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_end_of_day_balance_hub_contact_id.837487545f", "fqn": ["ae_project", "data_vault", "not_null_end_of_day_balance_hub_contact_id"], "alias": "not_null_end_of_day_balance_hub_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8291643, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_end_of_day_balance_hub_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub`\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.end_of_day_balance_hub", "attached_node": "model.ae_project.end_of_day_balance_hub"}, "test.ae_project.unique_end_of_day_balance_hub__eod_balance_hsh_.0bde643580": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(eod_balance_hsh)", "model": "{{ get_where_subquery(ref('end_of_day_balance_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_end_of_day_balance_hub__eod_balance_hsh_", "resource_type": "test", "package_name": "ae_project", "path": "unique_end_of_day_balance_hub__eod_balance_hsh_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_end_of_day_balance_hub__eod_balance_hsh_.0bde643580", "fqn": ["ae_project", "data_vault", "unique_end_of_day_balance_hub__eod_balance_hsh_"], "alias": "unique_end_of_day_balance_hub__eod_balance_hsh_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.831387, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_end_of_day_balance_hub__eod_balance_hsh_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (eod_balance_hsh) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_hub`\n  where (eod_balance_hsh) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.end_of_day_balance_hub", "attached_node": "model.ae_project.end_of_day_balance_hub"}, "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_hsh.4033f9daaa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "eod_balance_hsh", "model": "{{ get_where_subquery(ref('end_of_day_balance_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_end_of_day_balance_sat_eod_balance_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_end_of_day_balance_sat_eod_balance_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_hsh.4033f9daaa", "fqn": ["ae_project", "data_vault", "not_null_end_of_day_balance_sat_eod_balance_hsh"], "alias": "not_null_end_of_day_balance_sat_eod_balance_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.833641, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_end_of_day_balance_sat_eod_balance_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect eod_balance_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_sat`\nwhere eod_balance_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "eod_balance_hsh", "file_key_name": "models.end_of_day_balance_sat", "attached_node": "model.ae_project.end_of_day_balance_sat"}, "test.ae_project.not_null_end_of_day_balance_sat_valid_from_date.16bc8f0631": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from_date", "model": "{{ get_where_subquery(ref('end_of_day_balance_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_end_of_day_balance_sat_valid_from_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_end_of_day_balance_sat_valid_from_date.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_end_of_day_balance_sat_valid_from_date.16bc8f0631", "fqn": ["ae_project", "data_vault", "not_null_end_of_day_balance_sat_valid_from_date"], "alias": "not_null_end_of_day_balance_sat_valid_from_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8358748, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_end_of_day_balance_sat_valid_from_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from_date\nfrom `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_sat`\nwhere valid_from_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_from_date", "file_key_name": "models.end_of_day_balance_sat", "attached_node": "model.ae_project.end_of_day_balance_sat"}, "test.ae_project.unique_end_of_day_balance_sat_eod_balance_event_id.df46ae70d1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "eod_balance_event_id", "model": "{{ get_where_subquery(ref('end_of_day_balance_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_end_of_day_balance_sat_eod_balance_event_id", "resource_type": "test", "package_name": "ae_project", "path": "unique_end_of_day_balance_sat_eod_balance_event_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_end_of_day_balance_sat_eod_balance_event_id.df46ae70d1", "fqn": ["ae_project", "data_vault", "unique_end_of_day_balance_sat_eod_balance_event_id"], "alias": "unique_end_of_day_balance_sat_eod_balance_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8381484, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_end_of_day_balance_sat_eod_balance_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select eod_balance_event_id as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_sat`\n  where eod_balance_event_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "eod_balance_event_id", "file_key_name": "models.end_of_day_balance_sat", "attached_node": "model.ae_project.end_of_day_balance_sat"}, "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_event_id.db80f56064": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "eod_balance_event_id", "model": "{{ get_where_subquery(ref('end_of_day_balance_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_end_of_day_balance_sat_eod_balance_event_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_end_of_day_balance_sat_eod_balance_event_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_event_id.db80f56064", "fqn": ["ae_project", "data_vault", "not_null_end_of_day_balance_sat_eod_balance_event_id"], "alias": "not_null_end_of_day_balance_sat_eod_balance_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8406653, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_end_of_day_balance_sat_eod_balance_event_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect eod_balance_event_id\nfrom `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_sat`\nwhere eod_balance_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "eod_balance_event_id", "file_key_name": "models.end_of_day_balance_sat", "attached_node": "model.ae_project.end_of_day_balance_sat"}, "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_amount.0715e2cf45": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "eod_balance_amount", "model": "{{ get_where_subquery(ref('end_of_day_balance_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_end_of_day_balance_sat_eod_balance_amount", "resource_type": "test", "package_name": "ae_project", "path": "not_null_end_of_day_balance_sat_eod_balance_amount.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_amount.0715e2cf45", "fqn": ["ae_project", "data_vault", "not_null_end_of_day_balance_sat_eod_balance_amount"], "alias": "not_null_end_of_day_balance_sat_eod_balance_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8428996, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_end_of_day_balance_sat_eod_balance_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect eod_balance_amount\nfrom `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_sat`\nwhere eod_balance_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "eod_balance_amount", "file_key_name": "models.end_of_day_balance_sat", "attached_node": "model.ae_project.end_of_day_balance_sat"}, "test.ae_project.unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_.9975b27b50": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(eod_balance_hsh || '-' || valid_from_date)", "model": "{{ get_where_subquery(ref('end_of_day_balance_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_", "resource_type": "test", "package_name": "ae_project", "path": "unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_.9975b27b50", "fqn": ["ae_project", "data_vault", "unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_"], "alias": "unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.845192, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "end_of_day_balance_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.end_of_day_balance_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (eod_balance_hsh || '-' || valid_from_date) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`end_of_day_balance_sat`\n  where (eod_balance_hsh || '-' || valid_from_date) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.end_of_day_balance_sat", "attached_node": "model.ae_project.end_of_day_balance_sat"}, "test.ae_project.unique_eod_balance_account_link_link_hsh.1e483c3b85": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "link_hsh", "model": "{{ get_where_subquery(ref('eod_balance_account_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_eod_balance_account_link_link_hsh", "resource_type": "test", "package_name": "ae_project", "path": "unique_eod_balance_account_link_link_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_eod_balance_account_link_link_hsh.1e483c3b85", "fqn": ["ae_project", "data_vault", "unique_eod_balance_account_link_link_hsh"], "alias": "unique_eod_balance_account_link_link_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8474116, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "eod_balance_account_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.eod_balance_account_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_eod_balance_account_link_link_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select link_hsh as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`eod_balance_account_link`\n  where link_hsh is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "link_hsh", "file_key_name": "models.eod_balance_account_link", "attached_node": "model.ae_project.eod_balance_account_link"}, "test.ae_project.not_null_eod_balance_account_link_link_hsh.52c1ad79b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "link_hsh", "model": "{{ get_where_subquery(ref('eod_balance_account_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_eod_balance_account_link_link_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_eod_balance_account_link_link_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_eod_balance_account_link_link_hsh.52c1ad79b3", "fqn": ["ae_project", "data_vault", "not_null_eod_balance_account_link_link_hsh"], "alias": "not_null_eod_balance_account_link_link_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8496718, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "eod_balance_account_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.eod_balance_account_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_eod_balance_account_link_link_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect link_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`eod_balance_account_link`\nwhere link_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "link_hsh", "file_key_name": "models.eod_balance_account_link", "attached_node": "model.ae_project.eod_balance_account_link"}, "test.ae_project.unique_eod_balance_account_link__account_hsh_eod_balance_hsh_.6944e17b8b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(account_hsh || '-' || eod_balance_hsh)", "model": "{{ get_where_subquery(ref('eod_balance_account_link')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_eod_balance_account_link__account_hsh_eod_balance_hsh_", "resource_type": "test", "package_name": "ae_project", "path": "unique_eod_balance_account_link__account_hsh_eod_balance_hsh_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_eod_balance_account_link__account_hsh_eod_balance_hsh_.6944e17b8b", "fqn": ["ae_project", "data_vault", "unique_eod_balance_account_link__account_hsh_eod_balance_hsh_"], "alias": "unique_eod_balance_account_link__account_hsh_eod_balance_hsh_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8521633, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "eod_balance_account_link", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.eod_balance_account_link"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_eod_balance_account_link__account_hsh_eod_balance_hsh_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (account_hsh || '-' || eod_balance_hsh) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`eod_balance_account_link`\n  where (account_hsh || '-' || eod_balance_hsh) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.eod_balance_account_link", "attached_node": "model.ae_project.eod_balance_account_link"}, "test.ae_project.unique_product_hub_product_hsh.34cc6aae88": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_hsh", "model": "{{ get_where_subquery(ref('product_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_product_hub_product_hsh", "resource_type": "test", "package_name": "ae_project", "path": "unique_product_hub_product_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_product_hub_product_hsh.34cc6aae88", "fqn": ["ae_project", "data_vault", "unique_product_hub_product_hsh"], "alias": "unique_product_hub_product_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.85443, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_product_hub_product_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select product_hsh as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`product_hub`\n  where product_hsh is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_hsh", "file_key_name": "models.product_hub", "attached_node": "model.ae_project.product_hub"}, "test.ae_project.not_null_product_hub_product_hsh.f82bb33e19": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_hsh", "model": "{{ get_where_subquery(ref('product_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_product_hub_product_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_product_hub_product_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_product_hub_product_hsh.f82bb33e19", "fqn": ["ae_project", "data_vault", "not_null_product_hub_product_hsh"], "alias": "not_null_product_hub_product_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8566935, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_product_hub_product_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`product_hub`\nwhere product_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_hsh", "file_key_name": "models.product_hub", "attached_node": "model.ae_project.product_hub"}, "test.ae_project.unique_product_hub_product_id.cfe9f49a0e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('product_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_product_hub_product_id", "resource_type": "test", "package_name": "ae_project", "path": "unique_product_hub_product_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_product_hub_product_id.cfe9f49a0e", "fqn": ["ae_project", "data_vault", "unique_product_hub_product_id"], "alias": "unique_product_hub_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8589306, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_product_hub_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select product_id as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`product_hub`\n  where product_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_id", "file_key_name": "models.product_hub", "attached_node": "model.ae_project.product_hub"}, "test.ae_project.not_null_product_hub_product_id.272a3c3116": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('product_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_product_hub_product_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_product_hub_product_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_product_hub_product_id.272a3c3116", "fqn": ["ae_project", "data_vault", "not_null_product_hub_product_id"], "alias": "not_null_product_hub_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8611834, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_product_hub_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom `key-hope-406212`.`ae_data_vault`.`product_hub`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_id", "file_key_name": "models.product_hub", "attached_node": "model.ae_project.product_hub"}, "test.ae_project.unique_product_hub__product_hsh_.1cdde47845": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(product_hsh)", "model": "{{ get_where_subquery(ref('product_hub')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_product_hub__product_hsh_", "resource_type": "test", "package_name": "ae_project", "path": "unique_product_hub__product_hsh_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_product_hub__product_hsh_.1cdde47845", "fqn": ["ae_project", "data_vault", "unique_product_hub__product_hsh_"], "alias": "unique_product_hub__product_hsh_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8636687, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_hub", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_hub"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_product_hub__product_hsh_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (product_hsh) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`product_hub`\n  where (product_hsh) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.product_hub", "attached_node": "model.ae_project.product_hub"}, "test.ae_project.not_null_product_sat_product_hsh.817cc883ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_hsh", "model": "{{ get_where_subquery(ref('product_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_product_sat_product_hsh", "resource_type": "test", "package_name": "ae_project", "path": "not_null_product_sat_product_hsh.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_product_sat_product_hsh.817cc883ff", "fqn": ["ae_project", "data_vault", "not_null_product_sat_product_hsh"], "alias": "not_null_product_sat_product_hsh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8659449, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_product_sat_product_hsh.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_hsh\nfrom `key-hope-406212`.`ae_data_vault`.`product_sat`\nwhere product_hsh is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "product_hsh", "file_key_name": "models.product_sat", "attached_node": "model.ae_project.product_sat"}, "test.ae_project.not_null_product_sat_valid_from_date.4e1692623e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from_date", "model": "{{ get_where_subquery(ref('product_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_product_sat_valid_from_date", "resource_type": "test", "package_name": "ae_project", "path": "not_null_product_sat_valid_from_date.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_product_sat_valid_from_date.4e1692623e", "fqn": ["ae_project", "data_vault", "not_null_product_sat_valid_from_date"], "alias": "not_null_product_sat_valid_from_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.868166, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_product_sat_valid_from_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from_date\nfrom `key-hope-406212`.`ae_data_vault`.`product_sat`\nwhere valid_from_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "valid_from_date", "file_key_name": "models.product_sat", "attached_node": "model.ae_project.product_sat"}, "test.ae_project.not_null_product_sat_p_product_id.74b7a7ad82": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "p_product_id", "model": "{{ get_where_subquery(ref('product_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_product_sat_p_product_id", "resource_type": "test", "package_name": "ae_project", "path": "not_null_product_sat_p_product_id.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_product_sat_p_product_id.74b7a7ad82", "fqn": ["ae_project", "data_vault", "not_null_product_sat_p_product_id"], "alias": "not_null_product_sat_p_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8704076, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_product_sat_p_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect p_product_id\nfrom `key-hope-406212`.`ae_data_vault`.`product_sat`\nwhere p_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "p_product_id", "file_key_name": "models.product_sat", "attached_node": "model.ae_project.product_sat"}, "test.ae_project.not_null_product_sat_p_product_name.54062c3874": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "p_product_name", "model": "{{ get_where_subquery(ref('product_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "not_null_product_sat_p_product_name", "resource_type": "test", "package_name": "ae_project", "path": "not_null_product_sat_p_product_name.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.not_null_product_sat_p_product_name.54062c3874", "fqn": ["ae_project", "data_vault", "not_null_product_sat_p_product_name"], "alias": "not_null_product_sat_p_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8726456, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/not_null_product_sat_p_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect p_product_name\nfrom `key-hope-406212`.`ae_data_vault`.`product_sat`\nwhere p_product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "p_product_name", "file_key_name": "models.product_sat", "attached_node": "model.ae_project.product_sat"}, "test.ae_project.unique_product_sat__product_hsh_valid_from_date_.6e5a1474b7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(product_hsh || '-' || valid_from_date)", "model": "{{ get_where_subquery(ref('product_sat')) }}"}, "namespace": null}, "database": "key-hope-406212", "schema": "ae_dbt_test__audit", "name": "unique_product_sat__product_hsh_valid_from_date_", "resource_type": "test", "package_name": "ae_project", "path": "unique_product_sat__product_hsh_valid_from_date_.sql", "original_file_path": "models/data_vault/data_vault.yml", "unique_id": "test.ae_project.unique_product_sat__product_hsh_valid_from_date_.6e5a1474b7", "fqn": ["ae_project", "data_vault", "unique_product_sat__product_hsh_valid_from_date_"], "alias": "unique_product_sat__product_hsh_valid_from_date_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1701023112.8753836, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "product_sat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ae_project.product_sat"]}, "compiled_path": "docs/compiled/ae_project/models/data_vault/data_vault.yml/unique_product_sat__product_hsh_valid_from_date_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select (product_hsh || '-' || valid_from_date) as unique_field\n  from `key-hope-406212`.`ae_data_vault`.`product_sat`\n  where (product_hsh || '-' || valid_from_date) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.product_sat", "attached_node": "model.ae_project.product_sat"}}, "sources": {"source.ae_project.crm_a.contact": {"database": "key-hope-406212", "schema": "crm_a", "name": "contact", "resource_type": "source", "package_name": "ae_project", "path": "models/staging/stg_staging.yml", "original_file_path": "models/staging/stg_staging.yml", "unique_id": "source.ae_project.crm_a.contact", "fqn": ["ae_project", "staging", "crm_a", "contact"], "source_name": "crm_a", "source_description": "Crm_a is the source of the data coming from CRM System - A.", "loader": "", "identifier": "contact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_PARTITIONTIME", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contact is a table of source data.  \r\n- The data is already loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`key-hope-406212`.`crm_a`.`contact`", "created_at": 1701023112.8876545}, "source.ae_project.crm_a.account": {"database": "key-hope-406212", "schema": "crm_a", "name": "account", "resource_type": "source", "package_name": "ae_project", "path": "models/staging/stg_staging.yml", "original_file_path": "models/staging/stg_staging.yml", "unique_id": "source.ae_project.crm_a.account", "fqn": ["ae_project", "staging", "crm_a", "account"], "source_name": "crm_a", "source_description": "Crm_a is the source of the data coming from CRM System - A.", "loader": "", "identifier": "account", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_PARTITIONTIME", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Account is a table of source data.  \r\n- The data is already loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`key-hope-406212`.`crm_a`.`account`", "created_at": 1701023112.88788}, "source.ae_project.crm_b.contact": {"database": "key-hope-406212", "schema": "crm_b", "name": "contact", "resource_type": "source", "package_name": "ae_project", "path": "models/staging/stg_staging.yml", "original_file_path": "models/staging/stg_staging.yml", "unique_id": "source.ae_project.crm_b.contact", "fqn": ["ae_project", "staging", "crm_b", "contact"], "source_name": "crm_b", "source_description": "Crm_b is the source of the data coming from CRM System - B.", "loader": "", "identifier": "contact", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_PARTITIONTIME", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Contact is a table of source data.  \r\n- The data is already loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`key-hope-406212`.`crm_b`.`contact`", "created_at": 1701023112.8880725}, "source.ae_project.crm_b.account": {"database": "key-hope-406212", "schema": "crm_b", "name": "account", "resource_type": "source", "package_name": "ae_project", "path": "models/staging/stg_staging.yml", "original_file_path": "models/staging/stg_staging.yml", "unique_id": "source.ae_project.crm_b.account", "fqn": ["ae_project", "staging", "crm_b", "account"], "source_name": "crm_b", "source_description": "Crm_b is the source of the data coming from CRM System - B.", "loader": "", "identifier": "account", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_PARTITIONTIME", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Account is a table of source data.  \r\n- The data is already loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`key-hope-406212`.`crm_b`.`account`", "created_at": 1701023112.88826}, "source.ae_project.fin_a.completedtrans": {"database": "key-hope-406212", "schema": "fin_a", "name": "completedtrans", "resource_type": "source", "package_name": "ae_project", "path": "models/staging/stg_staging.yml", "original_file_path": "models/staging/stg_staging.yml", "unique_id": "source.ae_project.fin_a.completedtrans", "fqn": ["ae_project", "staging", "fin_a", "completedtrans"], "source_name": "fin_a", "source_description": "Fin_a is the transaction data of the customers from CRM System - A.", "loader": "", "identifier": "completedtrans", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_PARTITIONTIME", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Completedtrans is a table of source data.  \r\n- The data is already loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`key-hope-406212`.`fin_a`.`completedtrans`", "created_at": 1701023112.8884618}, "source.ae_project.fin_b.completedtrans": {"database": "key-hope-406212", "schema": "fin_b", "name": "completedtrans", "resource_type": "source", "package_name": "ae_project", "path": "models/staging/stg_staging.yml", "original_file_path": "models/staging/stg_staging.yml", "unique_id": "source.ae_project.fin_b.completedtrans", "fqn": ["ae_project", "staging", "fin_b", "completedtrans"], "source_name": "fin_b", "source_description": "Fin_b is the transaction data of the customers from CRM System - B.", "loader": "", "identifier": "completedtrans", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_PARTITIONTIME", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Completedtrans is a table of source data.  \r\n- The data is already loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`key-hope-406212`.`fin_b`.`completedtrans`", "created_at": 1701023112.8886497}}, "macros": {"macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7137437, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7144063, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7148542, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.715432, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7242348, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7251244, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7259166, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7264802, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7303505, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7309113, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7319078, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.732212, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7326736, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7330155, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7333555, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7337053, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7341118, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7347164, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7350786, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7354338, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7363172, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7372012, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7387912, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7391906, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7398036, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7406461, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7410066, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.741326, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7424088, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.743832, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7442818, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7446213, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7471094, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7508214, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7514606, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.753072, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7544434, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7628803, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7690146, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7696497, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7703497, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7707112, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7722645, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7732434, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7750678, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7795694, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7820714, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7832768, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7854693, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.786883, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7894425, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7917848, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7926981, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.793281, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7946787, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7954502, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.796552, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.796967, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.797223, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7977164, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7989087, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.7991633, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.799658, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8012931, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8025992, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8030632, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8041694, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.80465, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.805357, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8057601, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8061233, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.806532, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8068774, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8072999, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8081286, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.808613, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8089929, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8094075, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8097217, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8103294, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8115776, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8121278, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8126934, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8132458, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8142562, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8148472, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8154924, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8162997, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8169081, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8177698, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8186073, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.819353, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.82003, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8208933, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8230202, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8234687, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.823808, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8241394, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8244882, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8252523, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.826093, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8269536, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8276296, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8317144, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.842539, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8486023, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8489974, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8495123, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8510277, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8514085, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.851796, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8547924, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8577366, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8636768, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.864326, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8647642, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8649907, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8653345, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8656063, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.866057, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8679662, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8684149, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8690212, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8699956, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8708806, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.871496, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8788726, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.880846, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8813934, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8824522, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.883029, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8833623, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8836894, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.883976, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8843496, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.884657, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8857446, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8861744, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8888474, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8952274, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.8983617, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9038482, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9045706, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9051125, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9059918, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9063687, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.90678, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9077194, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9082549, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9085627, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9148326, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9155402, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9158745, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.917502, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.918033, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9184566, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9191055, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.919536, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9201856, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.920636, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9212372, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9216628, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9220057, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.922624, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9316347, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9352841, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9358943, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.938109, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9387116, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9401002, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9484825, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9511194, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9537332, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9556322, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9570005, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.959828, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9610739, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9625447, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9630783, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9646645, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9746237, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.976518, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9768188, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9779975, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9783876, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9787025, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9814665, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9823368, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9830947, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9886062, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.990218, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9906392, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.991582, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9931102, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9941366, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9945664, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9949746, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9956527, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.995968, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.9969852, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023111.997446, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0058122, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.006673, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0072486, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.01006, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0105896, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0119953, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0127451, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0130777, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0139542, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0142913, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.01516, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.01556, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0161016, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0164938, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0172217, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.017625, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0182562, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0185857, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0190866, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0192766, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.019987, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0203702, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.021387, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0217772, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0224547, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0231776, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.02376, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.024099, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0246289, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0248203, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0254526, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0257728, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0263488, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0266728, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0274734, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.028024, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0298514, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0302033, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.030571, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.030914, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0312767, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.031618, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0320163, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.032486, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.032903, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0334218, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0338027, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.034131, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0344899, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0348217, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0353653, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0356143, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0362062, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0365496, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0371952, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0375326, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0380993, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0383506, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0395064, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0404081, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0410573, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.041388, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0419357, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.042189, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0428767, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.043256, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0438032, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.044097, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0446792, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0452325, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0458415, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0461478, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0466928, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0469398, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0475354, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.048065, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0496876, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0506845, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0510979, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0513465, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0517426, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0519896, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0523863, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.052675, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.056282, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0566795, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0573807, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0578897, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0583575, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0587697, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0605786, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0613668, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0617902, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0625637, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0630727, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0643625, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.064957, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0666656, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0710459, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0714343, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0719242, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0726259, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0731835, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0739107, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0743592, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0747683, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0752554, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0759072, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0765135, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0777671, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0783145, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0786803, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0791488, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0805016, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0811307, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.081639, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0820477, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.082666, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0837545, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.084768, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.085147, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.085487, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0857382, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.086111, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0862956, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.086668, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0870442, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.088582, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0889175, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.089297, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0901809, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0906017, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0909169, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0912776, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0915723, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0944402, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0947223, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.09529, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0955658, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0963616, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0968451, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.097126, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0976539, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0981085, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0986497, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0990896, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.0995953, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1010892, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1015697, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1021416, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1026754, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1052237, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.107803, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1084516, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1089296, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1093252, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1097581, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1103466, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1108139, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1116693, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1121004, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.112496, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1135647, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.113997, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1143117, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1151078, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.115561, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.115955, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1163993, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1173346, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1182873, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1190643, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1203077, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1210363, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1216261, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1248612, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.127819, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1295547, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.130091, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.133177, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1344838, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1351757, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.137886, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1382573, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.140121, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1411088, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1424527, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1435318, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1437373, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1448054, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1454127, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1461, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1701023112.1467667, "supported_languages": null}}, "docs": {"doc.ae_project.def_source_data": {"name": "def_source_data", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_source_data", "block_contents": "is a table of source data.  \r\n- The data is already loaded into BigQuery.  \r\n- For remapping this source data into a different file, please change the credentials of database & schema in the \"sources\" configuration accordingly."}, "doc.ae_project.def_staging_entity": {"name": "def_staging_entity", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_staging_entity", "block_contents": "is a staging entity for multiple use of the data source"}, "doc.ae_project.def_ent_contact": {"name": "def_ent_contact", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_contact", "block_contents": "is a name given to an individual who is a customer of the bank."}, "doc.ae_project.def_ent_account": {"name": "def_ent_account", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_account", "block_contents": "contains the account(contract) details of the customers."}, "doc.ae_project.def_ent_product": {"name": "def_ent_product", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_product", "block_contents": "contains the product details of the customer accounts."}, "doc.ae_project.def_ent_balance": {"name": "def_ent_balance", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_balance", "block_contents": "is the transaction events that a customer makes via the account."}, "doc.ae_project.def_ent_link": {"name": "def_ent_link", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_ent_link", "block_contents": "is the link inbetween"}, "doc.ae_project.def_load_dt": {"name": "def_load_dt", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_load_dt", "block_contents": "A Load Dt is the date when the data is loaded into the table."}, "doc.ae_project.def_rec_src": {"name": "def_rec_src", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_rec_src", "block_contents": "A Rec Src is the source name of the data."}, "doc.ae_project.def_valid_from_date": {"name": "def_valid_from_date", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_valid_from_date", "block_contents": "A Valid From Date is the date which the data is valid from (SCD2 column)."}, "doc.ae_project.def_valid_to_date": {"name": "def_valid_to_date", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_valid_to_date", "block_contents": "A Valid To Date is the date which the data is valid until (SCD2 column)."}, "doc.ae_project.def_current_indicator": {"name": "def_current_indicator", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_current_indicator", "block_contents": "A Current Indicator indicates if the data is still the up to date (SCD2 column)."}, "doc.ae_project.def_deleted_indicator": {"name": "def_deleted_indicator", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_deleted_indicator", "block_contents": "A Deleted Indicator indicates if the data is not up to date anymore (SCD2 column)."}, "doc.ae_project.def_hsh": {"name": "def_hsh", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_hsh", "block_contents": "Hsh is the generated surrogate (hashed) key for a"}, "doc.ae_project.def_hsh_diff": {"name": "def_hsh_diff", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_hsh_diff", "block_contents": "Hsh Diff is a computation of the smallest difference between two hashes in different dates."}, "doc.ae_project.def_att_id": {"name": "def_att_id", "resource_type": "doc", "package_name": "ae_project", "path": "shared_definitions.md", "original_file_path": "models/shared_definitions.md", "unique_id": "doc.ae_project.def_att_id", "block_contents": "is the unique identifier of"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.ae_project.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "ae_project", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.ae_project.__overview__", "block_contents": "# Welcome to the User Data Model of AE\r\nThis project includes a set of models to create the dimensional model of End Of Day Balance.\r\n\r\nThe layers on this dimensional model:\r\n- **Staging:** Contains the source data and the views on top of the source data.\r\n- **Data_Vault:** Contains the Data Vault 2.0 data model how data from different sources is stored in data layer.\r\n- **Dim_DWH:** Contains the dimensional data model how these data sets are combined in Data Mart. Ready to use by the target application.\r\n\r\n```\r\nsources:\r\n  - name: crm_a\r\n    database: key-hope-406212\r\n    schema: crm_a\r\n    tables:\r\n        - name: contact\r\n    .\r\n        - name: account\r\n    .\r\n  - name: crm_b\r\n    database: key-hope-406212\r\n    schema: crm_b\r\n    tables:\r\n        - name: contact\r\n    .\r\n        - name: account\r\n    .\r\n  - name: fin_a\r\n    database: key-hope-406212\r\n    schema: fin_a\r\n    tables:\r\n        - name: completedtrans\r\n    .\r\n  - name: fin_b\r\n    database: key-hope-406212\r\n    schema: fin_b\r\n    tables:\r\n        - name: completedtrans\r\n    .\r\n```\r\n\r\nTry running the following commands:\r\n- **dbt build** (or dbt seed + dbt test + dbt run) to regenerate the entire model\r\n- **dbt docs generate** to regenerate the documentation\r\n\r\n### Resources:\r\n- GitHub link of this repository: [click]()\r\n- Check out the ERD diagrams of the data model: [click]()\r\n- Check out the DBT docs: [click]() for extensive information of each tables and columns\r\n- The linked data lake: [click]()\r\n- And lastly, check an example report which is created on dimensional data model: [click]()"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.ae_project.fact_end_of_day_balance": ["model.ae_project.account_contact_link", "model.ae_project.account_hub", "model.ae_project.account_product_link", "model.ae_project.contact_hub", "model.ae_project.contact_link_sa", "model.ae_project.dim_account", "model.ae_project.dim_contact", "model.ae_project.dim_date", "model.ae_project.dim_product", "model.ae_project.end_of_day_balance_hub", "model.ae_project.end_of_day_balance_sat", "model.ae_project.eod_balance_account_link", "model.ae_project.product_hub"], "model.ae_project.dim_product": ["model.ae_project.product_sat"], "model.ae_project.dim_account": ["model.ae_project.account_sat"], "model.ae_project.dim_date": ["model.ae_project.stg_sources__date"], "model.ae_project.dim_contact": ["model.ae_project.contact_link_sa", "model.ae_project.contact_sat"], "model.ae_project.contact_hub": ["model.ae_project.stg_sources__contact"], "model.ae_project.account_product_link": ["model.ae_project.account_hub", "model.ae_project.product_hub", "model.ae_project.stg_sources__account"], "model.ae_project.eod_balance_account_link": ["model.ae_project.account_hub", "model.ae_project.end_of_day_balance_hub", "model.ae_project.stg_sources__completedtrans"], "model.ae_project.account_sat": ["model.ae_project.account_hub", "model.ae_project.stg_sources__account"], "model.ae_project.end_of_day_balance_sat": ["model.ae_project.end_of_day_balance_hub", "model.ae_project.stg_sources__completedtrans"], "model.ae_project.contact_link_sa": ["model.ae_project.contact_hub"], "model.ae_project.product_sat": ["model.ae_project.product_hub", "model.ae_project.stg_sources__account"], "model.ae_project.contact_sat": ["model.ae_project.contact_hub", "model.ae_project.stg_sources__contact"], "model.ae_project.account_hub": ["model.ae_project.stg_sources__account"], "model.ae_project.end_of_day_balance_hub": ["model.ae_project.stg_sources__completedtrans"], "model.ae_project.product_hub": ["model.ae_project.stg_sources__account"], "model.ae_project.account_contact_link": ["model.ae_project.account_hub", "model.ae_project.contact_hub", "model.ae_project.stg_sources__account"], "model.ae_project.stg_sources__completedtrans": ["source.ae_project.fin_a.completedtrans", "source.ae_project.fin_b.completedtrans"], "model.ae_project.stg_sources__account": ["source.ae_project.crm_a.account", "source.ae_project.crm_b.account"], "model.ae_project.stg_sources__contact": ["source.ae_project.crm_a.contact", "source.ae_project.crm_b.contact"], "model.ae_project.stg_sources__date": [], "test.ae_project.not_null_dim_account_dim_account_id.7f162e639c": ["model.ae_project.dim_account"], "test.ae_project.not_null_dim_account_valid_from_date.5b645f23b2": ["model.ae_project.dim_account"], "test.ae_project.not_null_dim_account_valid_to_date.6b0d9d9773": ["model.ae_project.dim_account"], "test.ae_project.not_null_dim_account_current_indicator.fff68596b7": ["model.ae_project.dim_account"], "test.ae_project.accepted_values_dim_account_current_indicator__False__True__False.b28468d1bd": ["model.ae_project.dim_account"], "test.ae_project.not_null_dim_account_deleted_indicator.8c845abb9f": ["model.ae_project.dim_account"], "test.ae_project.accepted_values_dim_account_deleted_indicator__False__True__False.36980ff26b": ["model.ae_project.dim_account"], "test.ae_project.not_null_dim_account_account_id.c88a552464": ["model.ae_project.dim_account"], "test.ae_project.unique_dim_account__dim_account_id_valid_from_date_.b654e7d250": ["model.ae_project.dim_account"], "test.ae_project.not_null_dim_contact_dim_contact_id.82354013ca": ["model.ae_project.dim_contact"], "test.ae_project.not_null_dim_contact_valid_from_date.a8fba8467f": ["model.ae_project.dim_contact"], "test.ae_project.not_null_dim_contact_valid_to_date.35576c0870": ["model.ae_project.dim_contact"], "test.ae_project.not_null_dim_contact_current_indicator.b98b4b5538": ["model.ae_project.dim_contact"], "test.ae_project.accepted_values_dim_contact_current_indicator__False__True__False.c565552494": ["model.ae_project.dim_contact"], "test.ae_project.not_null_dim_contact_deleted_indicator.2f520670fe": ["model.ae_project.dim_contact"], "test.ae_project.accepted_values_dim_contact_deleted_indicator__False__True__False.3adf964b3c": ["model.ae_project.dim_contact"], "test.ae_project.not_null_dim_contact_contact_id.912ab2ef27": ["model.ae_project.dim_contact"], "test.ae_project.not_null_dim_contact_alternative_contact_id.b25a1d401f": ["model.ae_project.dim_contact"], "test.ae_project.unique_dim_contact__dim_contact_id_valid_from_date_.f2e8468cf7": ["model.ae_project.dim_contact"], "test.ae_project.not_null_dim_product_dim_product_id.388a125fbe": ["model.ae_project.dim_product"], "test.ae_project.not_null_dim_product_valid_from_date.3864d9290a": ["model.ae_project.dim_product"], "test.ae_project.not_null_dim_product_valid_to_date.8414f88d50": ["model.ae_project.dim_product"], "test.ae_project.not_null_dim_product_current_indicator.8719a0bd04": ["model.ae_project.dim_product"], "test.ae_project.accepted_values_dim_product_current_indicator__False__True__False.9ace036b6f": ["model.ae_project.dim_product"], "test.ae_project.not_null_dim_product_deleted_indicator.8931cf529f": ["model.ae_project.dim_product"], "test.ae_project.accepted_values_dim_product_deleted_indicator__False__True__False.b3979293c3": ["model.ae_project.dim_product"], "test.ae_project.not_null_dim_product_product_id.02b1f06816": ["model.ae_project.dim_product"], "test.ae_project.not_null_dim_product_product_name.1b672622d5": ["model.ae_project.dim_product"], "test.ae_project.unique_dim_product__dim_product_id_valid_from_date_.8de04b1e50": ["model.ae_project.dim_product"], "test.ae_project.unique_dim_date_dim_date_id.203517b970": ["model.ae_project.dim_date"], "test.ae_project.not_null_dim_date_dim_date_id.355483a04a": ["model.ae_project.dim_date"], "test.ae_project.unique_dim_date_date.dd069a8d31": ["model.ae_project.dim_date"], "test.ae_project.not_null_dim_date_date.78f11e7735": ["model.ae_project.dim_date"], "test.ae_project.not_null_dim_date_day.479b160c6f": ["model.ae_project.dim_date"], "test.ae_project.not_null_dim_date_month.180a460136": ["model.ae_project.dim_date"], "test.ae_project.not_null_dim_date_year.aac8e263ab": ["model.ae_project.dim_date"], "test.ae_project.unique_dim_date__dim_date_id_.755d0c1339": ["model.ae_project.dim_date"], "test.ae_project.not_null_fact_end_of_day_balance_dim_contact_id.95b6cbad60": ["model.ae_project.fact_end_of_day_balance"], "test.ae_project.not_null_fact_end_of_day_balance_dim_account_id.e4c2d7060b": ["model.ae_project.fact_end_of_day_balance"], "test.ae_project.not_null_fact_end_of_day_balance_dim_product_id.1d06d8ae4d": ["model.ae_project.fact_end_of_day_balance"], "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id.233346040c": ["model.ae_project.fact_end_of_day_balance"], "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id.33ccff24ac": ["model.ae_project.fact_end_of_day_balance"], "test.ae_project.not_null_fact_end_of_day_balance_latest_eod_balance_indicator.5526fcbdf4": ["model.ae_project.fact_end_of_day_balance"], "test.ae_project.accepted_values_fact_end_of_day_balance_latest_eod_balance_indicator__False__True__False.75e8bbad1a": ["model.ae_project.fact_end_of_day_balance"], "test.ae_project.not_null_fact_end_of_day_balance_eod_balance_amount.4c9d9bbe87": ["model.ae_project.fact_end_of_day_balance"], "test.ae_project.unique_account_contact_link_link_hsh.114c043113": ["model.ae_project.account_contact_link"], "test.ae_project.not_null_account_contact_link_link_hsh.cbf246e068": ["model.ae_project.account_contact_link"], "test.ae_project.unique_account_contact_link__account_hsh_contact_hsh_.cc50f71c28": ["model.ae_project.account_contact_link"], "test.ae_project.unique_account_hub_account_hsh.76c85d1f37": ["model.ae_project.account_hub"], "test.ae_project.not_null_account_hub_account_hsh.d3a4b6fc38": ["model.ae_project.account_hub"], "test.ae_project.unique_account_hub_account_id.efa0d6259a": ["model.ae_project.account_hub"], "test.ae_project.not_null_account_hub_account_id.e113dad695": ["model.ae_project.account_hub"], "test.ae_project.unique_account_hub__account_hsh_.06268c5694": ["model.ae_project.account_hub"], "test.ae_project.unique_account_product_link_link_hsh.0aabbb25f1": ["model.ae_project.account_product_link"], "test.ae_project.not_null_account_product_link_link_hsh.3de6c21670": ["model.ae_project.account_product_link"], "test.ae_project.unique_account_product_link__account_hsh_product_hsh_.d0941e9942": ["model.ae_project.account_product_link"], "test.ae_project.not_null_account_sat_account_hsh.afb00de2d4": ["model.ae_project.account_sat"], "test.ae_project.not_null_account_sat_valid_from_date.99e6d72751": ["model.ae_project.account_sat"], "test.ae_project.not_null_account_sat_a_account_id.4397270bba": ["model.ae_project.account_sat"], "test.ae_project.unique_account_sat__account_hsh_valid_from_date_.0bdc5dff8c": ["model.ae_project.account_sat"], "test.ae_project.unique_contact_hub_contact_hsh.6953fbb1e8": ["model.ae_project.contact_hub"], "test.ae_project.not_null_contact_hub_contact_hsh.2bc5f154b1": ["model.ae_project.contact_hub"], "test.ae_project.unique_contact_hub_contact_id.180dc7c316": ["model.ae_project.contact_hub"], "test.ae_project.not_null_contact_hub_contact_id.dec739111e": ["model.ae_project.contact_hub"], "test.ae_project.unique_contact_hub__contact_hsh_.906b6397c7": ["model.ae_project.contact_hub"], "test.ae_project.not_null_contact_sat_contact_hsh.c372889af2": ["model.ae_project.contact_sat"], "test.ae_project.not_null_contact_sat_valid_from_date.23c90242e6": ["model.ae_project.contact_sat"], "test.ae_project.not_null_contact_sat_c_contact_id.4b606efd2a": ["model.ae_project.contact_sat"], "test.ae_project.unique_contact_sat__contact_hsh_valid_from_date_.b460481673": ["model.ae_project.contact_sat"], "test.ae_project.unique_end_of_day_balance_hub_eod_balance_hsh.77dbc51a5d": ["model.ae_project.end_of_day_balance_hub"], "test.ae_project.not_null_end_of_day_balance_hub_eod_balance_hsh.3b8f485b49": ["model.ae_project.end_of_day_balance_hub"], "test.ae_project.unique_end_of_day_balance_hub_contact_id.0c30ce0fb0": ["model.ae_project.end_of_day_balance_hub"], "test.ae_project.not_null_end_of_day_balance_hub_contact_id.837487545f": ["model.ae_project.end_of_day_balance_hub"], "test.ae_project.unique_end_of_day_balance_hub__eod_balance_hsh_.0bde643580": ["model.ae_project.end_of_day_balance_hub"], "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_hsh.4033f9daaa": ["model.ae_project.end_of_day_balance_sat"], "test.ae_project.not_null_end_of_day_balance_sat_valid_from_date.16bc8f0631": ["model.ae_project.end_of_day_balance_sat"], "test.ae_project.unique_end_of_day_balance_sat_eod_balance_event_id.df46ae70d1": ["model.ae_project.end_of_day_balance_sat"], "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_event_id.db80f56064": ["model.ae_project.end_of_day_balance_sat"], "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_amount.0715e2cf45": ["model.ae_project.end_of_day_balance_sat"], "test.ae_project.unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_.9975b27b50": ["model.ae_project.end_of_day_balance_sat"], "test.ae_project.unique_eod_balance_account_link_link_hsh.1e483c3b85": ["model.ae_project.eod_balance_account_link"], "test.ae_project.not_null_eod_balance_account_link_link_hsh.52c1ad79b3": ["model.ae_project.eod_balance_account_link"], "test.ae_project.unique_eod_balance_account_link__account_hsh_eod_balance_hsh_.6944e17b8b": ["model.ae_project.eod_balance_account_link"], "test.ae_project.unique_product_hub_product_hsh.34cc6aae88": ["model.ae_project.product_hub"], "test.ae_project.not_null_product_hub_product_hsh.f82bb33e19": ["model.ae_project.product_hub"], "test.ae_project.unique_product_hub_product_id.cfe9f49a0e": ["model.ae_project.product_hub"], "test.ae_project.not_null_product_hub_product_id.272a3c3116": ["model.ae_project.product_hub"], "test.ae_project.unique_product_hub__product_hsh_.1cdde47845": ["model.ae_project.product_hub"], "test.ae_project.not_null_product_sat_product_hsh.817cc883ff": ["model.ae_project.product_sat"], "test.ae_project.not_null_product_sat_valid_from_date.4e1692623e": ["model.ae_project.product_sat"], "test.ae_project.not_null_product_sat_p_product_id.74b7a7ad82": ["model.ae_project.product_sat"], "test.ae_project.not_null_product_sat_p_product_name.54062c3874": ["model.ae_project.product_sat"], "test.ae_project.unique_product_sat__product_hsh_valid_from_date_.6e5a1474b7": ["model.ae_project.product_sat"], "source.ae_project.crm_a.contact": [], "source.ae_project.crm_a.account": [], "source.ae_project.crm_b.contact": [], "source.ae_project.crm_b.account": [], "source.ae_project.fin_a.completedtrans": [], "source.ae_project.fin_b.completedtrans": []}, "child_map": {"model.ae_project.fact_end_of_day_balance": ["test.ae_project.accepted_values_fact_end_of_day_balance_latest_eod_balance_indicator__False__True__False.75e8bbad1a", "test.ae_project.not_null_fact_end_of_day_balance_dim_account_id.e4c2d7060b", "test.ae_project.not_null_fact_end_of_day_balance_dim_contact_id.95b6cbad60", "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id.233346040c", "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id.33ccff24ac", "test.ae_project.not_null_fact_end_of_day_balance_dim_product_id.1d06d8ae4d", "test.ae_project.not_null_fact_end_of_day_balance_eod_balance_amount.4c9d9bbe87", "test.ae_project.not_null_fact_end_of_day_balance_latest_eod_balance_indicator.5526fcbdf4"], "model.ae_project.dim_product": ["model.ae_project.fact_end_of_day_balance", "test.ae_project.accepted_values_dim_product_current_indicator__False__True__False.9ace036b6f", "test.ae_project.accepted_values_dim_product_deleted_indicator__False__True__False.b3979293c3", "test.ae_project.not_null_dim_product_current_indicator.8719a0bd04", "test.ae_project.not_null_dim_product_deleted_indicator.8931cf529f", "test.ae_project.not_null_dim_product_dim_product_id.388a125fbe", "test.ae_project.not_null_dim_product_product_id.02b1f06816", "test.ae_project.not_null_dim_product_product_name.1b672622d5", "test.ae_project.not_null_dim_product_valid_from_date.3864d9290a", "test.ae_project.not_null_dim_product_valid_to_date.8414f88d50", "test.ae_project.unique_dim_product__dim_product_id_valid_from_date_.8de04b1e50"], "model.ae_project.dim_account": ["model.ae_project.fact_end_of_day_balance", "test.ae_project.accepted_values_dim_account_current_indicator__False__True__False.b28468d1bd", "test.ae_project.accepted_values_dim_account_deleted_indicator__False__True__False.36980ff26b", "test.ae_project.not_null_dim_account_account_id.c88a552464", "test.ae_project.not_null_dim_account_current_indicator.fff68596b7", "test.ae_project.not_null_dim_account_deleted_indicator.8c845abb9f", "test.ae_project.not_null_dim_account_dim_account_id.7f162e639c", "test.ae_project.not_null_dim_account_valid_from_date.5b645f23b2", "test.ae_project.not_null_dim_account_valid_to_date.6b0d9d9773", "test.ae_project.unique_dim_account__dim_account_id_valid_from_date_.b654e7d250"], "model.ae_project.dim_date": ["model.ae_project.fact_end_of_day_balance", "test.ae_project.not_null_dim_date_date.78f11e7735", "test.ae_project.not_null_dim_date_day.479b160c6f", "test.ae_project.not_null_dim_date_dim_date_id.355483a04a", "test.ae_project.not_null_dim_date_month.180a460136", "test.ae_project.not_null_dim_date_year.aac8e263ab", "test.ae_project.unique_dim_date__dim_date_id_.755d0c1339", "test.ae_project.unique_dim_date_date.dd069a8d31", "test.ae_project.unique_dim_date_dim_date_id.203517b970"], "model.ae_project.dim_contact": ["model.ae_project.fact_end_of_day_balance", "test.ae_project.accepted_values_dim_contact_current_indicator__False__True__False.c565552494", "test.ae_project.accepted_values_dim_contact_deleted_indicator__False__True__False.3adf964b3c", "test.ae_project.not_null_dim_contact_alternative_contact_id.b25a1d401f", "test.ae_project.not_null_dim_contact_contact_id.912ab2ef27", "test.ae_project.not_null_dim_contact_current_indicator.b98b4b5538", "test.ae_project.not_null_dim_contact_deleted_indicator.2f520670fe", "test.ae_project.not_null_dim_contact_dim_contact_id.82354013ca", "test.ae_project.not_null_dim_contact_valid_from_date.a8fba8467f", "test.ae_project.not_null_dim_contact_valid_to_date.35576c0870", "test.ae_project.unique_dim_contact__dim_contact_id_valid_from_date_.f2e8468cf7"], "model.ae_project.contact_hub": ["model.ae_project.account_contact_link", "model.ae_project.contact_link_sa", "model.ae_project.contact_sat", "model.ae_project.fact_end_of_day_balance", "test.ae_project.not_null_contact_hub_contact_hsh.2bc5f154b1", "test.ae_project.not_null_contact_hub_contact_id.dec739111e", "test.ae_project.unique_contact_hub__contact_hsh_.906b6397c7", "test.ae_project.unique_contact_hub_contact_hsh.6953fbb1e8", "test.ae_project.unique_contact_hub_contact_id.180dc7c316"], "model.ae_project.account_product_link": ["model.ae_project.fact_end_of_day_balance", "test.ae_project.not_null_account_product_link_link_hsh.3de6c21670", "test.ae_project.unique_account_product_link__account_hsh_product_hsh_.d0941e9942", "test.ae_project.unique_account_product_link_link_hsh.0aabbb25f1"], "model.ae_project.eod_balance_account_link": ["model.ae_project.fact_end_of_day_balance", "test.ae_project.not_null_eod_balance_account_link_link_hsh.52c1ad79b3", "test.ae_project.unique_eod_balance_account_link__account_hsh_eod_balance_hsh_.6944e17b8b", "test.ae_project.unique_eod_balance_account_link_link_hsh.1e483c3b85"], "model.ae_project.account_sat": ["model.ae_project.dim_account", "test.ae_project.not_null_account_sat_a_account_id.4397270bba", "test.ae_project.not_null_account_sat_account_hsh.afb00de2d4", "test.ae_project.not_null_account_sat_valid_from_date.99e6d72751", "test.ae_project.unique_account_sat__account_hsh_valid_from_date_.0bdc5dff8c"], "model.ae_project.end_of_day_balance_sat": ["model.ae_project.fact_end_of_day_balance", "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_amount.0715e2cf45", "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_event_id.db80f56064", "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_hsh.4033f9daaa", "test.ae_project.not_null_end_of_day_balance_sat_valid_from_date.16bc8f0631", "test.ae_project.unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_.9975b27b50", "test.ae_project.unique_end_of_day_balance_sat_eod_balance_event_id.df46ae70d1"], "model.ae_project.contact_link_sa": ["model.ae_project.dim_contact", "model.ae_project.fact_end_of_day_balance"], "model.ae_project.product_sat": ["model.ae_project.dim_product", "test.ae_project.not_null_product_sat_p_product_id.74b7a7ad82", "test.ae_project.not_null_product_sat_p_product_name.54062c3874", "test.ae_project.not_null_product_sat_product_hsh.817cc883ff", "test.ae_project.not_null_product_sat_valid_from_date.4e1692623e", "test.ae_project.unique_product_sat__product_hsh_valid_from_date_.6e5a1474b7"], "model.ae_project.contact_sat": ["model.ae_project.dim_contact", "test.ae_project.not_null_contact_sat_c_contact_id.4b606efd2a", "test.ae_project.not_null_contact_sat_contact_hsh.c372889af2", "test.ae_project.not_null_contact_sat_valid_from_date.23c90242e6", "test.ae_project.unique_contact_sat__contact_hsh_valid_from_date_.b460481673"], "model.ae_project.account_hub": ["model.ae_project.account_contact_link", "model.ae_project.account_product_link", "model.ae_project.account_sat", "model.ae_project.eod_balance_account_link", "model.ae_project.fact_end_of_day_balance", "test.ae_project.not_null_account_hub_account_hsh.d3a4b6fc38", "test.ae_project.not_null_account_hub_account_id.e113dad695", "test.ae_project.unique_account_hub__account_hsh_.06268c5694", "test.ae_project.unique_account_hub_account_hsh.76c85d1f37", "test.ae_project.unique_account_hub_account_id.efa0d6259a"], "model.ae_project.end_of_day_balance_hub": ["model.ae_project.end_of_day_balance_sat", "model.ae_project.eod_balance_account_link", "model.ae_project.fact_end_of_day_balance", "test.ae_project.not_null_end_of_day_balance_hub_contact_id.837487545f", "test.ae_project.not_null_end_of_day_balance_hub_eod_balance_hsh.3b8f485b49", "test.ae_project.unique_end_of_day_balance_hub__eod_balance_hsh_.0bde643580", "test.ae_project.unique_end_of_day_balance_hub_contact_id.0c30ce0fb0", "test.ae_project.unique_end_of_day_balance_hub_eod_balance_hsh.77dbc51a5d"], "model.ae_project.product_hub": ["model.ae_project.account_product_link", "model.ae_project.fact_end_of_day_balance", "model.ae_project.product_sat", "test.ae_project.not_null_product_hub_product_hsh.f82bb33e19", "test.ae_project.not_null_product_hub_product_id.272a3c3116", "test.ae_project.unique_product_hub__product_hsh_.1cdde47845", "test.ae_project.unique_product_hub_product_hsh.34cc6aae88", "test.ae_project.unique_product_hub_product_id.cfe9f49a0e"], "model.ae_project.account_contact_link": ["model.ae_project.fact_end_of_day_balance", "test.ae_project.not_null_account_contact_link_link_hsh.cbf246e068", "test.ae_project.unique_account_contact_link__account_hsh_contact_hsh_.cc50f71c28", "test.ae_project.unique_account_contact_link_link_hsh.114c043113"], "model.ae_project.stg_sources__completedtrans": ["model.ae_project.end_of_day_balance_hub", "model.ae_project.end_of_day_balance_sat", "model.ae_project.eod_balance_account_link"], "model.ae_project.stg_sources__account": ["model.ae_project.account_contact_link", "model.ae_project.account_hub", "model.ae_project.account_product_link", "model.ae_project.account_sat", "model.ae_project.product_hub", "model.ae_project.product_sat"], "model.ae_project.stg_sources__contact": ["model.ae_project.contact_hub", "model.ae_project.contact_sat"], "model.ae_project.stg_sources__date": ["model.ae_project.dim_date"], "test.ae_project.not_null_dim_account_dim_account_id.7f162e639c": [], "test.ae_project.not_null_dim_account_valid_from_date.5b645f23b2": [], "test.ae_project.not_null_dim_account_valid_to_date.6b0d9d9773": [], "test.ae_project.not_null_dim_account_current_indicator.fff68596b7": [], "test.ae_project.accepted_values_dim_account_current_indicator__False__True__False.b28468d1bd": [], "test.ae_project.not_null_dim_account_deleted_indicator.8c845abb9f": [], "test.ae_project.accepted_values_dim_account_deleted_indicator__False__True__False.36980ff26b": [], "test.ae_project.not_null_dim_account_account_id.c88a552464": [], "test.ae_project.unique_dim_account__dim_account_id_valid_from_date_.b654e7d250": [], "test.ae_project.not_null_dim_contact_dim_contact_id.82354013ca": [], "test.ae_project.not_null_dim_contact_valid_from_date.a8fba8467f": [], "test.ae_project.not_null_dim_contact_valid_to_date.35576c0870": [], "test.ae_project.not_null_dim_contact_current_indicator.b98b4b5538": [], "test.ae_project.accepted_values_dim_contact_current_indicator__False__True__False.c565552494": [], "test.ae_project.not_null_dim_contact_deleted_indicator.2f520670fe": [], "test.ae_project.accepted_values_dim_contact_deleted_indicator__False__True__False.3adf964b3c": [], "test.ae_project.not_null_dim_contact_contact_id.912ab2ef27": [], "test.ae_project.not_null_dim_contact_alternative_contact_id.b25a1d401f": [], "test.ae_project.unique_dim_contact__dim_contact_id_valid_from_date_.f2e8468cf7": [], "test.ae_project.not_null_dim_product_dim_product_id.388a125fbe": [], "test.ae_project.not_null_dim_product_valid_from_date.3864d9290a": [], "test.ae_project.not_null_dim_product_valid_to_date.8414f88d50": [], "test.ae_project.not_null_dim_product_current_indicator.8719a0bd04": [], "test.ae_project.accepted_values_dim_product_current_indicator__False__True__False.9ace036b6f": [], "test.ae_project.not_null_dim_product_deleted_indicator.8931cf529f": [], "test.ae_project.accepted_values_dim_product_deleted_indicator__False__True__False.b3979293c3": [], "test.ae_project.not_null_dim_product_product_id.02b1f06816": [], "test.ae_project.not_null_dim_product_product_name.1b672622d5": [], "test.ae_project.unique_dim_product__dim_product_id_valid_from_date_.8de04b1e50": [], "test.ae_project.unique_dim_date_dim_date_id.203517b970": [], "test.ae_project.not_null_dim_date_dim_date_id.355483a04a": [], "test.ae_project.unique_dim_date_date.dd069a8d31": [], "test.ae_project.not_null_dim_date_date.78f11e7735": [], "test.ae_project.not_null_dim_date_day.479b160c6f": [], "test.ae_project.not_null_dim_date_month.180a460136": [], "test.ae_project.not_null_dim_date_year.aac8e263ab": [], "test.ae_project.unique_dim_date__dim_date_id_.755d0c1339": [], "test.ae_project.not_null_fact_end_of_day_balance_dim_contact_id.95b6cbad60": [], "test.ae_project.not_null_fact_end_of_day_balance_dim_account_id.e4c2d7060b": [], "test.ae_project.not_null_fact_end_of_day_balance_dim_product_id.1d06d8ae4d": [], "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_from_date_id.233346040c": [], "test.ae_project.not_null_fact_end_of_day_balance_dim_eod_valid_to_date_id.33ccff24ac": [], "test.ae_project.not_null_fact_end_of_day_balance_latest_eod_balance_indicator.5526fcbdf4": [], "test.ae_project.accepted_values_fact_end_of_day_balance_latest_eod_balance_indicator__False__True__False.75e8bbad1a": [], "test.ae_project.not_null_fact_end_of_day_balance_eod_balance_amount.4c9d9bbe87": [], "test.ae_project.unique_account_contact_link_link_hsh.114c043113": [], "test.ae_project.not_null_account_contact_link_link_hsh.cbf246e068": [], "test.ae_project.unique_account_contact_link__account_hsh_contact_hsh_.cc50f71c28": [], "test.ae_project.unique_account_hub_account_hsh.76c85d1f37": [], "test.ae_project.not_null_account_hub_account_hsh.d3a4b6fc38": [], "test.ae_project.unique_account_hub_account_id.efa0d6259a": [], "test.ae_project.not_null_account_hub_account_id.e113dad695": [], "test.ae_project.unique_account_hub__account_hsh_.06268c5694": [], "test.ae_project.unique_account_product_link_link_hsh.0aabbb25f1": [], "test.ae_project.not_null_account_product_link_link_hsh.3de6c21670": [], "test.ae_project.unique_account_product_link__account_hsh_product_hsh_.d0941e9942": [], "test.ae_project.not_null_account_sat_account_hsh.afb00de2d4": [], "test.ae_project.not_null_account_sat_valid_from_date.99e6d72751": [], "test.ae_project.not_null_account_sat_a_account_id.4397270bba": [], "test.ae_project.unique_account_sat__account_hsh_valid_from_date_.0bdc5dff8c": [], "test.ae_project.unique_contact_hub_contact_hsh.6953fbb1e8": [], "test.ae_project.not_null_contact_hub_contact_hsh.2bc5f154b1": [], "test.ae_project.unique_contact_hub_contact_id.180dc7c316": [], "test.ae_project.not_null_contact_hub_contact_id.dec739111e": [], "test.ae_project.unique_contact_hub__contact_hsh_.906b6397c7": [], "test.ae_project.not_null_contact_sat_contact_hsh.c372889af2": [], "test.ae_project.not_null_contact_sat_valid_from_date.23c90242e6": [], "test.ae_project.not_null_contact_sat_c_contact_id.4b606efd2a": [], "test.ae_project.unique_contact_sat__contact_hsh_valid_from_date_.b460481673": [], "test.ae_project.unique_end_of_day_balance_hub_eod_balance_hsh.77dbc51a5d": [], "test.ae_project.not_null_end_of_day_balance_hub_eod_balance_hsh.3b8f485b49": [], "test.ae_project.unique_end_of_day_balance_hub_contact_id.0c30ce0fb0": [], "test.ae_project.not_null_end_of_day_balance_hub_contact_id.837487545f": [], "test.ae_project.unique_end_of_day_balance_hub__eod_balance_hsh_.0bde643580": [], "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_hsh.4033f9daaa": [], "test.ae_project.not_null_end_of_day_balance_sat_valid_from_date.16bc8f0631": [], "test.ae_project.unique_end_of_day_balance_sat_eod_balance_event_id.df46ae70d1": [], "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_event_id.db80f56064": [], "test.ae_project.not_null_end_of_day_balance_sat_eod_balance_amount.0715e2cf45": [], "test.ae_project.unique_end_of_day_balance_sat__eod_balance_hsh_valid_from_date_.9975b27b50": [], "test.ae_project.unique_eod_balance_account_link_link_hsh.1e483c3b85": [], "test.ae_project.not_null_eod_balance_account_link_link_hsh.52c1ad79b3": [], "test.ae_project.unique_eod_balance_account_link__account_hsh_eod_balance_hsh_.6944e17b8b": [], "test.ae_project.unique_product_hub_product_hsh.34cc6aae88": [], "test.ae_project.not_null_product_hub_product_hsh.f82bb33e19": [], "test.ae_project.unique_product_hub_product_id.cfe9f49a0e": [], "test.ae_project.not_null_product_hub_product_id.272a3c3116": [], "test.ae_project.unique_product_hub__product_hsh_.1cdde47845": [], "test.ae_project.not_null_product_sat_product_hsh.817cc883ff": [], "test.ae_project.not_null_product_sat_valid_from_date.4e1692623e": [], "test.ae_project.not_null_product_sat_p_product_id.74b7a7ad82": [], "test.ae_project.not_null_product_sat_p_product_name.54062c3874": [], "test.ae_project.unique_product_sat__product_hsh_valid_from_date_.6e5a1474b7": [], "source.ae_project.crm_a.contact": ["model.ae_project.stg_sources__contact"], "source.ae_project.crm_a.account": ["model.ae_project.stg_sources__account"], "source.ae_project.crm_b.contact": ["model.ae_project.stg_sources__contact"], "source.ae_project.crm_b.account": ["model.ae_project.stg_sources__account"], "source.ae_project.fin_a.completedtrans": ["model.ae_project.stg_sources__completedtrans"], "source.ae_project.fin_b.completedtrans": ["model.ae_project.stg_sources__completedtrans"]}, "group_map": {}, "semantic_models": {}}